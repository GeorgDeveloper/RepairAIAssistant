package ru.georgdeveloper.assistanttelegram.handler;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpMethod;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.Arrays;

@Component
public class ReportHandler {
    
    private static final Logger logger = LoggerFactory.getLogger(ReportHandler.class);
    
    @Value("${web.service.url:http://localhost:8082}")
    private String webServiceUrl;
    
    private final RestTemplate restTemplate;
    
    public ReportHandler(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }
    
    public String getReportMenuMessage() {
        return "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:\n\n" +
               "‚Ä¢ –û—Ç—á–µ—Ç –∑–∞ —Å—É—Ç–∫–∏ - –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã dashboard\n" +
               "‚Ä¢ –¢–µ–∫—É—â–∏–π –æ—Ç—á–µ—Ç - –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –æ–Ω–ª–∞–π–Ω –ø–æ —É—á–∞—Å—Ç–∫–∞–º –∏ —Ç–µ–∫—É—â–∏–µ —Ä–∞–±–æ—Ç—ã";
    }
    
    public InlineKeyboardMarkup getReportMenuKeyboard() {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        
        InlineKeyboardButton dailyReportButton = new InlineKeyboardButton("üìÖ –û—Ç—á–µ—Ç –∑–∞ —Å—É—Ç–∫–∏");
        dailyReportButton.setCallbackData("daily_report");
        
        InlineKeyboardButton currentReportButton = new InlineKeyboardButton("‚ö° –¢–µ–∫—É—â–∏–π –æ—Ç—á–µ—Ç");
        currentReportButton.setCallbackData("current_report");
        
        InlineKeyboardButton backButton = new InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥");
        backButton.setCallbackData("back_to_main");
        
        List<List<InlineKeyboardButton>> keyboard = Arrays.asList(
            Arrays.asList(dailyReportButton),
            Arrays.asList(currentReportButton),
            Arrays.asList(backButton)
        );
        
        markup.setKeyboard(keyboard);
        return markup;
    }
    
    public String generateDailyReport() {
        try {
            logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞ —Å—É—Ç–∫–∏");
            
             // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—É—Ç–∫–∏
             LocalDate yesterday = LocalDate.now().minusDays(1);
            
            Map<String, Object> reportData = new HashMap<>();
            
             // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É—á–∞—Å—Ç–∫–∞–º –∏–∑ current-metrics (–∫–∞–∫ –Ω–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–µ)
             List<Map<String, Object>> areaData = null; // –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å currentMetrics
             logger.info("–î–∞–Ω–Ω—ã–µ –ø–æ —É—á–∞—Å—Ç–∫–∞–º –±—É–¥—É—Ç –≤–∑—è—Ç—ã –∏–∑ current-metrics");
             
             // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ breakdown –∏ availability –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—É—Ç–∫–∏
             List<Map<String, Object>> breakDownData = fetchData("/dashboard/breakDown");
             logger.info("–ü–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö breakdown: {}", breakDownData != null ? breakDownData.size() : 0);
             
             List<Map<String, Object>> availabilityData = fetchData("/dashboard/availability");
             logger.info("–ü–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö availability: {}", availabilityData != null ? availabilityData.size() : 0);
             
             List<Map<String, Object>> currentMetrics = fetchData("/dashboard/current-metrics");
             logger.info("–ü–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö current-metrics: {}", currentMetrics != null ? currentMetrics.size() : 0);
             
             List<Map<String, Object>> topBreakdownsWeek = fetchData("/dashboard/top-breakdowns-week");
             logger.info("–ü–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö top-breakdowns-week: {}", topBreakdownsWeek != null ? topBreakdownsWeek.size() : 0);
             
             List<Map<String, Object>> topBreakdownsWeekKeyLines = fetchData("/dashboard/top-breakdowns-week-key-lines");
             logger.info("–ü–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö top-breakdowns-week-key-lines: {}", topBreakdownsWeekKeyLines != null ? topBreakdownsWeekKeyLines.size() : 0);
             
             List<Map<String, Object>> pmData = fetchData("/dashboard/pm-plan-fact-tag");
             logger.info("–ü–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö pm-plan-fact-tag: {}", pmData != null ? pmData.size() : 0);
            
            reportData.put("areaData", areaData);
            reportData.put("breakDown", breakDownData);
            reportData.put("availability", availabilityData);
            reportData.put("currentMetrics", currentMetrics);
            reportData.put("topBreakdownsWeek", topBreakdownsWeek);
            reportData.put("topBreakdownsWeekKeyLines", topBreakdownsWeekKeyLines);
            reportData.put("pmData", pmData);
            
            return formatDailyReport(reportData);
            
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –∑–∞ —Å—É—Ç–∫–∏: {}", e.getMessage(), e);
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –∑–∞ —Å—É—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
        }
    }
    
    public String generateCurrentReport() {
        try {
            logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞");
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–Ω–ª–∞–π–Ω –¥–∞–Ω–Ω—ã–µ –ø–æ —É—á–∞—Å—Ç–∫–∞–º
            List<Map<String, Object>> bdMetrics = fetchData("/dashboard/online/bd");
            List<Map<String, Object>> availabilityMetrics = fetchData("/dashboard/online/availability");
            List<Map<String, Object>> currentMainLines = fetchData("/dashboard/main-lines/current");
            List<Map<String, Object>> activeWorkOrders = fetchData("/api/work-orders/active");
            
            return formatCurrentReport(bdMetrics, availabilityMetrics, currentMainLines, activeWorkOrders);
            
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞: {}", e.getMessage(), e);
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
        }
    }
    
    public InlineKeyboardMarkup getBackToReportsKeyboard() {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();

        InlineKeyboardButton backButton = new InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –æ—Ç—á–µ—Ç–∞–º");
        backButton.setCallbackData("request_report");

        List<List<InlineKeyboardButton>> keyboard = Arrays.asList(
            Arrays.asList(backButton)
        );

        markup.setKeyboard(keyboard);
        return markup;
    }
    
    private List<Map<String, Object>> fetchData(String endpoint) {
        try {
            String url = webServiceUrl + endpoint;
            logger.debug("–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö: {}", url);
            
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è current-metrics, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å Map –≤–º–µ—Å—Ç–æ List
            if (endpoint.equals("/dashboard/current-metrics")) {
                try {
                    @SuppressWarnings("unchecked")
                    Map<String, Object> response = restTemplate.getForObject(url, Map.class);
                    if (response != null) {
                        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Map –≤ List —Å –æ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
                        return Arrays.asList(response);
                    }
                } catch (Exception e) {
                    logger.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ current-metrics –∫–∞–∫ Map: {}", e.getMessage());
                }
            }
            
            return restTemplate.exchange(
                url,
                HttpMethod.GET,
                null,
                new ParameterizedTypeReference<List<Map<String, Object>>>() {}
            ).getBody();
            
        } catch (Exception e) {
            logger.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å {}: {}", endpoint, e.getMessage());
            return new ArrayList<>();
        }
    }
    
    private List<Map<String, Object>> fetchDataWithParams(String endpoint, String... params) {
        try {
            StringBuilder url = new StringBuilder(webServiceUrl + endpoint);
            if (params.length > 0) {
                url.append("?");
                for (int i = 0; i < params.length; i += 2) {
                    if (i > 0) url.append("&");
                    url.append(params[i]).append("=").append(params[i + 1]);
                }
            }
            
            logger.debug("–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {}", url);
            
            return restTemplate.exchange(
                url.toString(),
                HttpMethod.GET,
                null,
                new ParameterizedTypeReference<List<Map<String, Object>>>() {}
            ).getBody();
            
        } catch (Exception e) {
            logger.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {}: {}", endpoint, e.getMessage());
            return new ArrayList<>();
        }
    }
    
    private String formatDailyReport(Map<String, Object> data) {
        StringBuilder report = new StringBuilder();
        LocalDate yesterday = LocalDate.now().minusDays(1);
        report.append("üìä –û–¢–ß–ï–¢ –ó–ê –°–£–¢–ö–ò\n");
        report.append("üìÖ –î–∞—Ç–∞: ").append(yesterday.format(DateTimeFormatter.ofPattern("dd.MM.yyyy"))).append("\n\n");
        
         // –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ Breakdown –ø–æ —É—á–∞—Å—Ç–∫–∞–º –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—É—Ç–∫–∏ (–∏–∑ current-metrics)
         @SuppressWarnings("unchecked")
         List<Map<String, Object>> currentMetrics = (List<Map<String, Object>>) data.get("currentMetrics");
         logger.debug("Current metrics: {} –∑–∞–ø–∏—Å–µ–π", currentMetrics != null ? currentMetrics.size() : 0);
         
         if (currentMetrics != null && !currentMetrics.isEmpty()) {
             // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –∏–∑ current-metrics (–∫–∞–∫ –Ω–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–µ)
             Map<String, Object> metrics = currentMetrics.get(0);
             logger.debug("Current metrics data: {}", metrics);
             
             report.append("üìâ –ü–û–ö–ê–ó–ê–¢–ï–õ–ò BREAKDOWN –ü–û –£–ß–ê–°–¢–ö–ê–ú:\n");
             
             // –ú–∞–ø–ø–∏–Ω–≥ —É—á–∞—Å—Ç–∫–æ–≤ –∫–∞–∫ –Ω–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–µ
             String[] areaPrefixes = {
                 "report_new_mixing_area", "report_semifinishing_area", "report_building_area",
                 "report_curing_area", "report_finishig_area", "report_modules", "report_plant"
             };
             String[] areaNames = {
                 "NewMixingArea", "SemifinishingArea", "BuildingArea",
                 "CuringArea", "FinishigArea", "Modules", "Plant"
             };
             
             Map<String, Double> areaBreakdown = new HashMap<>();
             for (int i = 0; i < areaPrefixes.length; i++) {
                 String prefix = areaPrefixes[i];
                 String areaName = areaNames[i];
                 
                 Object bdToday = metrics.get(prefix + "_bd_today");
                 if (bdToday != null) {
                     try {
                         double value = Double.parseDouble(bdToday.toString());
                         areaBreakdown.put(areaName, value);
                         logger.debug("–£—á–∞—Å—Ç–æ–∫ {}: BD = {}", areaName, value);
                     } catch (NumberFormatException e) {
                         logger.warn("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ BD –¥–ª—è —É—á–∞—Å—Ç–∫–∞ {}: {}", areaName, bdToday);
                     }
                 }
             }
             
             // –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—á–∞—Å—Ç–∫–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é BD% –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-5
             areaBreakdown.entrySet().stream()
                 .sorted(Map.Entry.<String, Double>comparingByValue().reversed())
                 .limit(5)
                 .forEach(entry -> {
                     report.append("‚Ä¢ ").append(entry.getKey()).append(" - ").append(String.format("%.2f", entry.getValue())).append("%\n");
                 });
             
             report.append("\n");
         } else {
            logger.debug("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö current-metrics, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏");
            // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —É—á–∞—Å—Ç–∫–∞–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            @SuppressWarnings("unchecked")
            List<Map<String, Object>> breakDownData = (List<Map<String, Object>>) data.get("breakDown");
            if (breakDownData != null && !breakDownData.isEmpty()) {
                report.append("üìâ –ü–û–ö–ê–ó–ê–¢–ï–õ–ò BREAKDOWN:\n");
                String yesterdayStr = yesterday.format(DateTimeFormatter.ofPattern("dd.MM.yyyy"));
                
                // –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
                for (Map<String, Object> item : breakDownData) {
                    String day = (String) item.get("production_day");
                    if (yesterdayStr.equals(day)) {
                        Object downtime = item.get("downtime_percentage");
                        if (downtime != null) {
                            report.append("‚Ä¢ ").append(day).append(": ").append(downtime).append("%\n");
                        }
                        break;
                    }
                }
                report.append("\n");
            }
        }
        
        // –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ Availability –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—É—Ç–∫–∏
        @SuppressWarnings("unchecked")
        List<Map<String, Object>> availabilityData = (List<Map<String, Object>>) data.get("availability");
        if (availabilityData != null && !availabilityData.isEmpty()) {
            report.append("üìà –ü–û–ö–ê–ó–ê–¢–ï–õ–ò –î–û–°–¢–£–ü–ù–û–°–¢–ò:\n");
            String yesterdayStr = yesterday.format(DateTimeFormatter.ofPattern("dd.MM.yyyy"));
            
            // –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
            for (Map<String, Object> item : availabilityData) {
                String day = (String) item.get("production_day");
                if (yesterdayStr.equals(day)) {
                    Object availability = item.get("availability");
                    if (availability != null) {
                        report.append("‚Ä¢ ").append(day).append(": ").append(availability).append("%\n");
                    }
                    break;
                }
            }
            report.append("\n");
        }
        
         // –¢–æ–ø –ø–æ–ª–æ–º–æ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é
         @SuppressWarnings("unchecked")
         List<Map<String, Object>> topBreakdowns = (List<Map<String, Object>>) data.get("topBreakdownsWeek");
         logger.debug("–¢–æ–ø –ø–æ–ª–æ–º–æ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é: {} –∑–∞–ø–∏—Å–µ–π", topBreakdowns != null ? topBreakdowns.size() : 0);
         if (topBreakdowns != null && !topBreakdowns.isEmpty()) {
             report.append("üîß –¢–û–ü –ü–û–õ–û–ú–û–ö –ó–ê –ù–ï–î–ï–õ–Æ:\n");
             int count = 0;
             for (Map<String, Object> item : topBreakdowns) {
                 if (count >= 5) break; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-5
                 String machine = (String) item.get("machine_name");
                 Object downtime = item.get("machine_downtime");
                 logger.debug("–ü–æ–ª–æ–º–∫–∞: machine={}, downtime={}", machine, downtime);
                 if (machine != null && downtime != null) {
                     report.append("‚Ä¢ ").append(machine).append(": ").append(downtime).append("\n");
                     count++;
                 }
             }
             report.append("\n");
         } else {
             logger.debug("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–ø –ø–æ–ª–æ–º–∫–∞—Ö –∑–∞ –Ω–µ–¥–µ–ª—é");
         }
        
         // –ö–ª—é—á–µ–≤—ã–µ –ª–∏–Ω–∏–∏
         @SuppressWarnings("unchecked")
         List<Map<String, Object>> keyLines = (List<Map<String, Object>>) data.get("topBreakdownsWeekKeyLines");
         logger.debug("–ö–ª—é—á–µ–≤—ã–µ –ª–∏–Ω–∏–∏: {} –∑–∞–ø–∏—Å–µ–π", keyLines != null ? keyLines.size() : 0);
         if (keyLines != null && !keyLines.isEmpty()) {
             report.append("üè≠ –ö–õ–Æ–ß–ï–í–´–ï –õ–ò–ù–ò–ò (–ù–ï–î–ï–õ–Ø):\n");
             int count = 0;
             for (Map<String, Object> item : keyLines) {
                 if (count >= 5) break; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-5
                 String machine = (String) item.get("machine_name");
                 Object downtime = item.get("machine_downtime");
                 logger.debug("–ö–ª—é—á–µ–≤–∞—è –ª–∏–Ω–∏—è: machine={}, downtime={}", machine, downtime);
                 if (machine != null && downtime != null) {
                     report.append("‚Ä¢ ").append(machine).append(": ").append(downtime).append("\n");
                     count++;
                 }
             }
             report.append("\n");
         } else {
             logger.debug("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª—é—á–µ–≤—ã—Ö –ª–∏–Ω–∏—è—Ö");
         }
        
         // –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ PM (–ø–ª–∞–Ω–æ–≤–æ-–ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è)
         @SuppressWarnings("unchecked")
         List<Map<String, Object>> pmData = (List<Map<String, Object>>) data.get("pmData");
         logger.debug("PM –¥–∞–Ω–Ω—ã–µ: {} –∑–∞–ø–∏—Å–µ–π", pmData != null ? pmData.size() : 0);
         if (pmData != null && !pmData.isEmpty()) {
             report.append("üîß –í–´–ü–û–õ–ù–ï–ù–ò–ï PM:\n");
             String yesterdayStr = yesterday.format(DateTimeFormatter.ofPattern("dd.MM.yyyy"));
             logger.debug("–ò—â–µ–º PM –¥–∞–Ω–Ω—ã–µ –∑–∞ –¥–∞—Ç—É: {}", yesterdayStr);
             
             // –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
             boolean found = false;
             for (Map<String, Object> item : pmData) {
                 String day = (String) item.get("production_day");
                 logger.debug("PM –∑–∞–ø–∏—Å—å: day={}, plan={}, fact={}, tag={}", 
                     day, item.get("plan"), item.get("fact"), item.get("tag"));
                 if (yesterdayStr.equals(day)) {
                     Object plan = item.get("plan");
                     Object fact = item.get("fact");
                     Object tag = item.get("tag");
                     
                     if (plan != null && fact != null) {
                         report.append("‚Ä¢ –ü–ª–∞–Ω: ").append(plan).append("\n");
                         report.append("‚Ä¢ –§–∞–∫—Ç: ").append(fact).append("\n");
                         if (tag != null) {
                             report.append("‚Ä¢ Tag: ").append(tag).append("\n");
                         }
                         // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                         try {
                             double planValue = Double.parseDouble(plan.toString());
                             double factValue = Double.parseDouble(fact.toString());
                             if (planValue > 0) {
                                 double percentage = (factValue / planValue) * 100;
                                 report.append("‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: ").append(String.format("%.1f", percentage)).append("%\n");
                             }
                         } catch (NumberFormatException e) {
                             logger.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ PM: {}", e.getMessage());
                         }
                         found = true;
                     }
                     break;
                 }
             }
             if (!found) {
                 logger.debug("–ù–µ –Ω–∞–π–¥–µ–Ω—ã PM –¥–∞–Ω–Ω—ã–µ –∑–∞ –¥–∞—Ç—É {}", yesterdayStr);
             }
         } else {
             logger.debug("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ PM");
         }
        
        String reportText = report.toString();
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (Telegram –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤)
        if (reportText.length() > 4000) {
            reportText = reportText.substring(0, 4000) + "\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)";
        }
        
        return reportText;
    }
    
    private String formatCurrentReport(List<Map<String, Object>> bdMetrics, 
                                     List<Map<String, Object>> availabilityMetrics,
                                     List<Map<String, Object>> currentMainLines,
                                     List<Map<String, Object>> activeWorkOrders) {
        StringBuilder report = new StringBuilder();
        report.append("‚ö° –¢–ï–ö–£–©–ò–ô –û–¢–ß–ï–¢\n");
        report.append("üïê –í—Ä–µ–º—è: ").append(java.time.LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm"))).append("\n\n");
        
         // –¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ —É—á–∞—Å—Ç–∫–∞–º (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏)
         if (bdMetrics != null && !bdMetrics.isEmpty()) {
             report.append("üìä –¢–ï–ö–£–©–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò –ü–û –£–ß–ê–°–¢–ö–ê–ú:\n");
             
             // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É—á–∞—Å—Ç–∫–∞–º –∏ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
             Map<String, Map<String, Object>> latestByArea = new HashMap<>();
             for (Map<String, Object> item : bdMetrics) {
                 String area = (String) item.get("area");
                 String timestamp = (String) item.get("timestamp");
                 Object value = item.get("value");
                 
                 if (area != null && timestamp != null && value != null) {
                     // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è —É—á–∞—Å—Ç–∫–∞ –∏–ª–∏ –±–æ–ª–µ–µ –Ω–æ–≤–∞—è
                     if (!latestByArea.containsKey(area) || 
                         timestamp.compareTo((String) latestByArea.get(area).get("timestamp")) > 0) {
                         latestByArea.put(area, item);
                     }
                 }
             }
             
             // –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–∫—É
             latestByArea.values().stream()
                 .sorted((a, b) -> ((String) a.get("area")).compareTo((String) b.get("area")))
                 .forEach(item -> {
                     String area = (String) item.get("area");
                     Object value = item.get("value");
                     report.append("‚Ä¢ ").append(area).append(": ").append(value).append("%\n");
                 });
             
             report.append("\n");
         }
        
         // –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ —É—á–∞—Å—Ç–∫–∞–º (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏)
         if (availabilityMetrics != null && !availabilityMetrics.isEmpty()) {
             report.append("üìà –î–û–°–¢–£–ü–ù–û–°–¢–¨ –ü–û –£–ß–ê–°–¢–ö–ê–ú:\n");
             
             // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É—á–∞—Å—Ç–∫–∞–º –∏ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
             Map<String, Map<String, Object>> latestAvailabilityByArea = new HashMap<>();
             for (Map<String, Object> item : availabilityMetrics) {
                 String area = (String) item.get("area");
                 String timestamp = (String) item.get("timestamp");
                 Object value = item.get("value");
                 
                 if (area != null && timestamp != null && value != null) {
                     // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è —É—á–∞—Å—Ç–∫–∞ –∏–ª–∏ –±–æ–ª–µ–µ –Ω–æ–≤–∞—è
                     if (!latestAvailabilityByArea.containsKey(area) || 
                         timestamp.compareTo((String) latestAvailabilityByArea.get(area).get("timestamp")) > 0) {
                         latestAvailabilityByArea.put(area, item);
                     }
                 }
             }
             
             // –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–∫—É
             latestAvailabilityByArea.values().stream()
                 .sorted((a, b) -> ((String) a.get("area")).compareTo((String) b.get("area")))
                 .forEach(item -> {
                     String area = (String) item.get("area");
                     Object value = item.get("value");
                     report.append("‚Ä¢ ").append(area).append(": ").append(value).append("%\n");
                 });
             
             report.append("\n");
         }
        
         // –ö–ª—é—á–µ–≤—ã–µ –ª–∏–Ω–∏–∏ —É–±—Ä–∞–Ω—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
         // –¢–µ–∫—É—â–∏–µ –Ω–∞—Ä—è–¥—ã –Ω–∞ —Ä–∞–±–æ—Ç—ã
         if (activeWorkOrders != null && !activeWorkOrders.isEmpty()) {
             report.append("üîß –¢–ï–ö–£–©–ò–ï –ù–ê–†–Ø–î–´ –ù–ê –†–ê–ë–û–¢–´:\n");
             int count = 0;
             for (Map<String, Object> item : activeWorkOrders) {
                 if (count >= 10) break; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                 String machine = (String) item.get("machineName");
                 String type = (String) item.get("type");
                 String status = (String) item.get("status");
                 Object duration = item.get("duration");
                 
                 if (machine != null && type != null && status != null) {
                     report.append("‚Ä¢ ").append(machine).append(" - ").append(type).append(" (").append(status).append(")");
                     if (duration != null) {
                         report.append(" - ").append(duration);
                     }
                     report.append("\n");
                     count++;
                 }
             }
             
             if (count == 0) {
                 report.append("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Ä—è–¥–æ–≤ –Ω–∞ —Ä–∞–±–æ—Ç—ã\n");
             }
         } else {
             report.append("üîß –¢–ï–ö–£–©–ò–ï –ù–ê–†–Ø–î–´ –ù–ê –†–ê–ë–û–¢–´:\n");
             report.append("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Ä—è–¥–æ–≤ –Ω–∞ —Ä–∞–±–æ—Ç—ã\n");
         }
        
        String reportText = report.toString();
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (Telegram –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤)
        if (reportText.length() > 4000) {
            reportText = reportText.substring(0, 4000) + "\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)";
        }
        
        return reportText;
    }
}
