package ru.georgdeveloper.assistanttelegram.bot;


import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import java.util.Base64;
import java.nio.charset.StandardCharsets;
import java.util.Map;
import org.telegram.telegrambots.meta.api.methods.send.SendChatAction;
import org.telegram.telegrambots.meta.api.methods.ActionType;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.georgdeveloper.assistanttelegram.config.BotProperties;
import ru.georgdeveloper.assistanttelegram.handler.CommandHandler;
import ru.georgdeveloper.assistanttelegram.handler.MessageHandler;
import ru.georgdeveloper.assistanttelegram.handler.DocumentHandler;
import ru.georgdeveloper.assistanttelegram.handler.ReportHandler;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ä–µ–º–æ–Ω—Ç–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.
 * 
 * –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:
 * 1. Telegram API -> RepairAssistantBot (–ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π)
 * 2. RepairAssistantBot -> CommandHandler/MessageHandler (–æ–±—Ä–∞–±–æ—Ç–∫–∞)
 * 3. MessageHandler -> CoreServiceClient (–∑–∞–ø—Ä–æ—Å –∫ assistant-core)
 * 4. CoreServiceClient -> RepairAssistantService (–±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞)
 * 5. RepairAssistantService -> OllamaClient (AI –∞–Ω–∞–ª–∏–∑)
 * 6. –û—Ç–≤–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø–æ —Ü–µ–ø–æ—á–∫–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ Telegram
 * 
 * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
 * - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Long Polling –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
 * - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (>4096 —Å–∏–º–≤–æ–ª–æ–≤)
 * - –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –ë–î
 * - –§–∏–ª—å—Ç—Ä—É–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è AI –º–æ–¥–µ–ª–∏ deepseek-coder:6.7b
 */
@Component
public class RepairAssistantBot extends TelegramLongPollingBot {
    
    private static final Logger logger = LoggerFactory.getLogger(RepairAssistantBot.class);
    
    private final BotProperties botProperties;
    private final CommandHandler commandHandler;
    private final MessageHandler messageHandler;
    private final DocumentHandler documentHandler;
    private final ReportHandler reportHandler;
    
    public RepairAssistantBot(BotProperties botProperties, CommandHandler commandHandler, MessageHandler messageHandler, DocumentHandler documentHandler, ReportHandler reportHandler) {
        super(botProperties.getToken());
        this.botProperties = botProperties;
        this.commandHandler = commandHandler;
        this.messageHandler = messageHandler;
        this.documentHandler = documentHandler;
        this.reportHandler = reportHandler;
        // Set bot reference in DocumentHandler to break circular dependency
        this.documentHandler.setBot(this);
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Telegram API –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±–æ—Ç–∞.
     */
    @Override
    public String getBotUsername() {
        return botProperties.getUsername();
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
     * –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç @BotFather –≤ Telegram.
     */
    @Override
    public String getBotToken() {
        return botProperties.getToken();
    }
    
    /**
     * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram.
     * 
     * –õ–æ–≥–∏–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏:
     * - –ö–æ–º–∞–Ω–¥—ã (–Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /) -> CommandHandler
     * - –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è -> MessageHandler -> AI –∞–Ω–∞–ª–∏–∑
     * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     * 
     * @param update –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram API
     */
    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage()) {
            Long chatId = update.getMessage().getChatId();
            
            if (update.getMessage().hasText()) {
                String messageText = update.getMessage().getText();
                String response;
                if (commandHandler.isCommand(messageText)) {
                    response = commandHandler.processCommand(messageText, chatId);
                    if (messageText.equals("/start")) {
                        sendTextMessageWithKeyboard(chatId, response, commandHandler.getMainMenuKeyboard());
                    } else {
                        sendTextMessage(chatId, response);
                    }
                } else {
                    sendTypingAction(chatId);
                    response = messageHandler.processMessage(messageText, chatId, () -> sendTypingAction(chatId));
                    sendTextMessageWithFeedback(chatId, messageText, response);
                }
            } else if (update.getMessage().hasDocument()) {
                // Handle document messages
                String fileId = update.getMessage().getDocument().getFileId();
                String fileName = update.getMessage().getDocument().getFileName();
                sendTypingAction(chatId);
                String response = documentHandler.processDocument(fileId, fileName, chatId);
                sendTextMessage(chatId, response);
            }
        } else if (update.hasCallbackQuery()) {
            handleCallback(update.getCallbackQuery());
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Inline-–∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
     */
    private void sendTextMessageWithFeedback(Long chatId, String userQuery, String answer) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(answer);

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø–∞—Ä—ã –∑–∞–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç
        String feedbackId = shortHash(userQuery + "::" + answer);

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        InlineKeyboardButton btnCorrect = new InlineKeyboardButton("‚úÖ –û—Ç–≤–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω");
        btnCorrect.setCallbackData("feedback_correct::" + feedbackId);
        InlineKeyboardButton btnRetry = new InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ");
        btnRetry.setCallbackData("feedback_retry::" + feedbackId);
        InlineKeyboardButton btnNew = new InlineKeyboardButton("üÜï –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥");
        btnNew.setCallbackData("feedback_new");
        markup.setKeyboard(java.util.Arrays.asList(
            java.util.Arrays.asList(btnCorrect),
            java.util.Arrays.asList(btnRetry, btnNew)
        ));
        message.setReplyMarkup(markup);
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –≤ –ø–∞–º—è—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ feedbackId -> –∑–∞–ø—Ä–æ—Å/–æ—Ç–≤–µ—Ç
        FeedbackMemory.put(feedbackId, new FeedbackPair(userQuery, answer));
        try {
            execute(message);
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏: {}", e.getMessage(), e);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ CallbackQuery
     */
    private void handleCallback(CallbackQuery callbackQuery) {
        String data = callbackQuery.getData();
        Long chatId = callbackQuery.getMessage().getChatId();
        
        if (data.startsWith("feedback_correct::")) {
            String feedbackId = data.substring("feedback_correct::".length());
            FeedbackPair pair = FeedbackMemory.get(feedbackId);
            if (pair != null) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—É –∑–∞–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ CoreServiceClient
                try {
                    messageHandler.getCoreServiceClient().saveFeedback(pair.userQuery, pair.answer);
                    sendTextMessage(chatId, "–°–ø–∞—Å–∏–±–æ! –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏. –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.");
                } catch (Exception e) {
                    sendTextMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: " + e.getMessage());
                }
            } else {
                sendTextMessage(chatId, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å/–æ—Ç–≤–µ—Ç.");
            }
        } else if (data.startsWith("feedback_retry::")) {
            String feedbackId = data.substring("feedback_retry::".length());
            FeedbackPair pair = FeedbackMemory.get(feedbackId);
            if (pair != null) {
                sendTypingAction(chatId);
                String newAnswer = messageHandler.processMessage(pair.userQuery, chatId, () -> sendTypingAction(chatId));
                sendTextMessageWithFeedback(chatId, pair.userQuery, newAnswer);
            } else {
                sendTextMessage(chatId, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å.");
            }
        } else if (data.equals("feedback_new")) {
            sendTextMessage(chatId, "–î–∏–∞–ª–æ–≥ —Å–±—Ä–æ—à–µ–Ω. –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.");
        } else if (data.equals("chat_with_assistant")) {
            sendTextMessage(chatId, "üí¨ –†–µ–∂–∏–º —á–∞—Ç–∞ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n" +
                           "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ —Ä–µ–º–æ–Ω—Ç–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. " +
                           "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –∞–Ω–∞–ª–∏–∑–æ–º –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π, –ø–æ–∏—Å–∫–æ–º —Ä–µ—à–µ–Ω–∏–π –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.");
        } else if (data.equals("request_report")) {
            sendTextMessageWithKeyboard(chatId, reportHandler.getReportMenuMessage(), reportHandler.getReportMenuKeyboard());
        } else if (data.equals("daily_report")) {
            sendTypingAction(chatId);
            String report = reportHandler.generateDailyReport();
            sendTextMessage(chatId, report);
        } else if (data.equals("current_report")) {
            sendTypingAction(chatId);
            String report = reportHandler.generateCurrentReport();
            sendTextMessage(chatId, report);
        } else if (data.equals("back_to_main")) {
            sendTextMessageWithKeyboard(chatId, commandHandler.handleStart(chatId), commandHandler.getMainMenuKeyboard());
        }
        
        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        try {
            org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery answerCallbackQuery = 
                new org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery();
            answerCallbackQuery.setCallbackQueryId(callbackQuery.getId());
            execute(answerCallbackQuery);
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback query: {}", e.getMessage(), e);
        }
    }

    // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π feedbackId -> –∑–∞–ø—Ä–æ—Å/–æ—Ç–≤–µ—Ç
    private static final Map<String, FeedbackPair> FeedbackMemory = new java.util.concurrent.ConcurrentHashMap<>();
    private static class FeedbackPair {
        final String userQuery;
        final String answer;
        FeedbackPair(String userQuery, String answer) {
            this.userQuery = userQuery;
            this.answer = answer;
        }
    }

    // –ö–æ—Ä–æ—Ç–∫–∏–π hash –¥–ª—è callback_data (Base64 –æ—Ç –ø–µ—Ä–≤—ã—Ö 8 –±–∞–π—Ç SHA-256)
    private String shortHash(String s) {
        try {
            java.security.MessageDigest digest = java.security.MessageDigest.getInstance("SHA-256");
            byte[] hash = digest.digest(s.getBytes(StandardCharsets.UTF_8));
            return Base64.getUrlEncoder().withoutPadding().encodeToString(java.util.Arrays.copyOf(hash, 8));
        } catch (Exception e) {
            return Integer.toHexString(s.hashCode());
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç" –≤ —á–∞—Ç
     */
    private void sendTypingAction(Long chatId) {
        SendChatAction chatAction = new SendChatAction();
        chatAction.setChatId(chatId.toString());
        chatAction.setAction(ActionType.TYPING);
        
        try {
            execute(chatAction);
            logger.debug("–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä '–ø–µ—á–∞—Ç–∞–µ—Ç' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {}", chatId);
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏: {}", e.getMessage(), e);
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
     * 
     * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
     * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
     * - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
     * - –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π Telegram API
     * 
     * @param chatId ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param text –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
     */
    private void sendTextMessage(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        
        try {
            // –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Telegram API
            execute(message);
        } catch (TelegramApiException e) {
            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {}", e.getMessage(), e);
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
     * 
     * @param chatId ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param text –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
     * @param keyboard –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private void sendTextMessageWithKeyboard(Long chatId, String text, InlineKeyboardMarkup keyboard) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        message.setReplyMarkup(keyboard);
        
        try {
            execute(message);
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π: {}", e.getMessage(), e);
        }
    }
}