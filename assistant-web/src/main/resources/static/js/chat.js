const link = document.createElement('link');
link.rel = 'stylesheet';
link.href = '/static/css/chat.css';
document.head.appendChild(link);

function sendMessage() {
    const input = document.getElementById('messageInput');
    const message = input.value.trim();
    
    if (!message) return;
    
    addMessage('user', message);
    input.value = '';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    const loadingMessage = addMessage('assistant', 'ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º JSON —Ñ–æ—Ä–º–∞—Ç–µ –∫–∞–∫ –≤ Telegram
    fetch('/api/chat', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json;charset=UTF-8',
        },
        body: JSON.stringify(message)
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        return response.text();
    })
    .then(data => {
        // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        loadingMessage.remove();
        addMessage('assistant', data);
        showFeedbackButtons(message, data);
    })
    .catch(error => {
        // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        loadingMessage.remove();
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
        addMessage('assistant', '‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: ' + error.message + '. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    });
}

function addMessage(sender, text) {
    const messages = document.getElementById('messages');
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${sender}`;
    messageDiv.textContent = `${sender === 'user' ? '–í—ã' : '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç'}: ${text}`;

    // Apply specific styles for system messages
    if (sender === 'system') {
        messageDiv.style.fontWeight = 'bold';
        messageDiv.style.backgroundColor = '#90ee90'; // Light green background
        messageDiv.style.padding = '10px';
        messageDiv.style.borderRadius = '5px';
    }
    
    // –°—Ç–∏–ª–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≥—Ä—É–∑–∫–∏
    if (text.includes('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é') || text.includes('–ì–µ–Ω–µ—Ä–∏—Ä—É—é')) {
        messageDiv.style.fontStyle = 'italic';
        messageDiv.style.color = '#666';
        messageDiv.style.backgroundColor = '#f0f0f0';
        messageDiv.style.padding = '8px';
        messageDiv.style.borderRadius = '4px';
        messageDiv.classList.add('loading-message');
    }

    messages.appendChild(messageDiv);
    messages.scrollTop = messages.scrollHeight;
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è
    return messageDiv;
}

function showFeedbackButtons(request, response) {
    const feedbackDiv = document.getElementById('feedback-buttons');
    feedbackDiv.style.display = 'block';
    feedbackDiv.style.alignItems = 'center';
    feedbackDiv.dataset.request = request;
    feedbackDiv.dataset.response = response;

}

function hideFeedbackButtons() {
    const feedbackDiv = document.getElementById('feedback-buttons');
    feedbackDiv.style.display = 'none';
    feedbackDiv.dataset.request = '';
    feedbackDiv.dataset.response = '';
}

function sendFeedback(type) {
    const feedbackDiv = document.getElementById('feedback-buttons');
    feedbackDiv.style.fontWeight = 'bold';
    feedbackDiv.style.color = 'green';
    
    const request = feedbackDiv.dataset.request;
    const response = feedbackDiv.dataset.response;
    if (type === 'correct') {
        fetch('/api/chat/feedback', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ request, response })
        }).then(() => {
            addMessage('system', '‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ! –í–∞—à –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –±—É–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤.');
            hideFeedbackButtons();
        }).catch(() => {
            addMessage('system', '‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø—Ä–∏–Ω—è—Ç–∞. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã.');
            hideFeedbackButtons();
        });
    } else if (type === 'regenerate') {
        sendMessageAgain(request);
        hideFeedbackButtons();
    } else if (type === 'newdialog') {
        document.getElementById('messages').innerHTML = '';
        hideFeedbackButtons();
    }
}

function sendMessageAgain(message) {
    addMessage('user', message);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    const loadingMessage = addMessage('assistant', 'üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç...');
    
    fetch('/api/chat', {
        method: 'POST',
        headers: { 
            'Content-Type': 'application/json;charset=UTF-8'
        },
        body: JSON.stringify(message)
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        return response.text();
    })
    .then(data => {
        // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        loadingMessage.remove();
        addMessage('assistant', data);
        showFeedbackButtons(message, data);
    })
    .catch(error => {
        // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        loadingMessage.remove();
        console.error('–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', error);
        addMessage('assistant', '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ' + error.message);
    });
}

// Add event listener for Enter key
const messageInput = document.getElementById('messageInput');
if (messageInput) {
    messageInput.addEventListener('keydown', function(event) {
        if (event.key === 'Enter') {
            sendMessage();
        }
    });
}