package ru.georgdeveloper.assistantweb.controller;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;

import org.springframework.web.bind.annotation.*;
import ru.georgdeveloper.assistantweb.client.CoreServiceClient;
import ru.georgdeveloper.assistantcore.service.FallbackAssistantService;

@Controller
public class AssistantController {

    @GetMapping("/dashboard")
    public String dashboard() {
        return "dashboard";
    }
    
    private final CoreServiceClient coreServiceClient;

    @Value("${ai.enabled:true}")
    private boolean aiEnabled;
    
    @Autowired(required = false)
    private FallbackAssistantService fallbackService;
    
    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
     * @param coreServiceClient HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —è–¥—Ä–æ–º
     */
    public AssistantController(CoreServiceClient coreServiceClient) {
        this.coreServiceClient = coreServiceClient;
    }
    
    @GetMapping("/")
    public String index() {
        return "index";
    }
    
    @GetMapping("/chat")
    public String chat() {
        if (!aiEnabled) {
            return "index";
        }
        return "chat";
    }

    @GetMapping("/long_report")
    public String longReport() {
        return "long_report";
    }

    @GetMapping("/manuals")
    public String manuals() {
        return "manuals";
    }

    @GetMapping("/gantt")
    public String gantt() {
        return "gantt";
    }

    @GetMapping("/dinamic_bd")
    public String dinamicBd() {
        return "dinamic_bd";
    }

    @GetMapping("/top_causes")
    public String topCauses() {
        return "top_causes";
    }

    @GetMapping("/top-causes")
    public String topCausesAlt() {
        return "top_causes";
    }

    @GetMapping("/top_equipment")
    public String topEquipment() {
        return "top_equipment";
    }

    @GetMapping("/top-equipment")
    public String topEquipmentAlt() {
        return "top_equipment";
    }

    @GetMapping("/top_areas")
    public String topAreas() {
        return "top_areas";
    }

    @GetMapping("/top-areas")
    public String topAreasAlt() {
        return "top_areas";
    }

    @GetMapping("/failures")
    public String failures() {
        return "failures";
    }

    @PostMapping("/api/chat")
    @ResponseBody
    public String processChat(@RequestBody String message) {
        if (!aiEnabled) {
            return "üö´ AI –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (ai.enabled=false). –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è.";
        }
        
        // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–∏—Ö –∫–∞–≤—ã—á–µ–∫ JSON
        String cleanMessage = message;
        if (message.startsWith("\"") && message.endsWith("\"")) {
            cleanMessage = message.substring(1, message.length() - 1);
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Å–µ—Ä–≤–∏—Å –µ—Å–ª–∏ AI –æ—Ç–∫–ª—é—á–µ–Ω
        if (!aiEnabled && fallbackService != null) {
            return fallbackService.processQuery(cleanMessage);
        }
        
        try {
            // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            System.out.println("Web –∑–∞–ø—Ä–æ—Å: " + cleanMessage);
            
            return coreServiceClient.analyzeRepairRequest(cleanMessage);
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-–∑–∞–ø—Ä–æ—Å–∞: " + e.getMessage());
            return "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
        }
    }

    @PostMapping("/api/chat/feedback")
    @ResponseBody
    public String processFeedback(@RequestBody FeedbackDto feedback) {
        if (!aiEnabled) {
            return "AI is disabled";
        }
        return coreServiceClient.sendFeedback(feedback);
    }

    @GetMapping("/dashboard/equipment-maintenance-records")
    @ResponseBody
    public java.util.List<java.util.Map<String, Object>> getEquipmentMaintenanceRecords(
            @RequestParam(name = "limit", defaultValue = "500") int limit) {
        return coreServiceClient.getEquipmentMaintenanceRecords(limit);
    }

    public static class FeedbackDto {
        public String request;
        public String response;
    }
}