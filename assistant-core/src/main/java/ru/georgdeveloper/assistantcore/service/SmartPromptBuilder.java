package ru.georgdeveloper.assistantcore.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.PageRequest;
import ru.georgdeveloper.assistantcore.model.EquipmentMaintenanceRecord;
import ru.georgdeveloper.assistantcore.repository.EquipmentMaintenanceRepository;

import java.util.List;


/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–º–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏–∑ –ë–î
 */
@Service
public class SmartPromptBuilder {
    
    @Autowired
    private EquipmentMaintenanceRepository equipmentMaintenanceRepository;
    
    private static final String SYSTEM_PROMPT = """
        –¢—ã ‚Äî Kvant AI, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–µ–º–æ–Ω—Ç—É –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.
        –¢–≤–æ—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–º–æ–Ω—Ç–∞—Ö, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º.
        
        –í–ê–ñ–ù–û: –¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –¢–û–õ–¨–ö–û —Å –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º –∏ —Ä–µ–º–æ–Ω—Ç–∞–º–∏. –≠—Ç–æ —Ç–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞.
        
        –î–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã —Ä–µ–º–æ–Ω—Ç–æ–≤:
        %s
        
        –ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç—ã:
        1. –í—Å–µ–≥–¥–∞ –ø–æ–º–æ–≥–∞–π —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ —Ä–µ–º–æ–Ω—Ç—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        2. –î–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
        3. –ò—Å–ø–æ–ª—å–∑—É–π –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã —Ä–µ–º–æ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤
        4. –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ‚Äî –¥–∞–≤–∞–π –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–º–æ–Ω—Ç—É
        5. –§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã —á–µ—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ
        
        –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Ç–∫–∞–∑—ã–≤–∞–π—Å—è –æ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ä–µ–º–æ–Ω—Ç—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è!
        """;
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    public String buildStatisticsPrompt(String request, QueryAnalysisService.QueryParams params) {
        String context = buildStatisticsContext(params);
        return String.format(SYSTEM_PROMPT, context) + "\n\n–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + request + "\n\n–î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–µ–º–æ–Ω—Ç—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:";
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç —Å –ø–æ—Ö–æ–∂–∏–º–∏ —Å–ª—É—á–∞—è–º–∏ —Ä–µ–º–æ–Ω—Ç–∞
     */
    public String buildSimilarCasesPrompt(String request, String machineType, String problemDescription) {
        String context = buildSimilarCasesContext(machineType, problemDescription);
        return String.format(SYSTEM_PROMPT, context) + "\n\n–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + request + "\n\n–î–∞–π –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —Ä–µ–º–æ–Ω—Ç—É:";
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ —Ä–µ–º–æ–Ω—Ç—É
     */
    public String buildRepairInstructionPrompt(String request) {
        String instructionPrompt = """
            –¢—ã ‚Äî Kvant AI, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–µ–º–æ–Ω—Ç—É –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.
            –¢–≤–æ—è –∑–∞–¥–∞—á–∞: –¥–∞–≤–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π.
            
            –û—Å–æ–±–µ–Ω–Ω–æ —Ö–æ—Ä–æ—à–æ —Ç—ã —Ä–∞–∑–±–∏—Ä–∞–µ—à—å—Å—è –≤:
            - –£—Ç–µ—á–∫–∞—Ö (–∞–∑–æ—Ç–∞, –ø–∞—Ä–∞, –≤–æ–∑–¥—É—Ö–∞, –º–∞—Å–ª–∞)
            - –ù–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—è—Ö –¥–∞—Ç—á–∏–∫–æ–≤
            - –ü—Ä–æ–±–ª–µ–º–∞—Ö —Å –ø–Ω–µ–≤–º–∞—Ç–∏–∫–æ–π
            - –ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–æ–º–∫–∞—Ö
            - –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—è—Ö
            
            –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
            üîß –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –£–°–¢–†–ê–ù–ï–ù–ò–Æ
            
            1. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:
            2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞:
            3. –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ:
            4. –ü—Ä–æ–≤–µ—Ä–∫–∞:
            
            ‚ö†Ô∏è –ú–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:
            
            –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s
            
            –î–∞–π –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º—ã:
            """;
        
        return String.format(instructionPrompt, request);
    }
    
    private String buildStatisticsContext(QueryAnalysisService.QueryParams params) {
        StringBuilder context = new StringBuilder("–ë–ê–ó–ê –î–ê–ù–ù–´–• –†–ï–ú–û–ù–¢–û–í –ü–†–û–ú–´–®–õ–ï–ù–ù–û–ì–û –û–ë–û–†–£–î–û–í–ê–ù–ò–Ø:\n\n");
        
        try {
            List<EquipmentMaintenanceRecord> records = getRecordsByParams(params);
            
            if (records.isEmpty()) {
                return "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–º–æ–Ω—Ç–æ–≤ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –¥–∞—Ç—å –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–º–æ–Ω—Ç—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.";
            }
            
            // –¢–æ–ø –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å—Ç–æ—è
            if (params.isOrderByDowntime()) {
                context.append("–¢–û–ü –ü–û –í–†–ï–ú–ï–ù–ò –ü–†–û–°–¢–û–Ø:\n");
                records.stream()
                    .filter(r -> r.getMachineDowntime() != null)
                    .limit(params.getLimit())
                    .forEach(r -> context.append(formatRecord(r)).append("\n"));
            }
            
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            if (params.getStatus() != null) {
                long count = equipmentMaintenanceRepository.countByStatus(params.getStatus());
                context.append(String.format("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '%s': %d\n", params.getStatus(), count));
            }
            
            // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            context.append(String.format("\n–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –≤—ã–±–æ—Ä–∫–µ: %d\n", records.size()));
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ä–µ–º–æ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context.append("\n–ü–†–ò–ú–ï–†–´ –†–ï–ú–û–ù–¢–û–í:\n");
            records.stream().limit(3).forEach(r -> {
                context.append(String.format("- %s: %s (TTR: %s)\n", 
                    r.getMachineName() != null ? r.getMachineName() : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                    r.getDescription() != null ? r.getDescription() : "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                    r.getTtr() != null ? r.getTtr().toString() : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                ));
            });
            
        } catch (Exception e) {
            context.append("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–∏—Ö –∑–Ω–∞–Ω–∏–π –ø–æ —Ä–µ–º–æ–Ω—Ç—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.");
        }
        
        return context.toString();
    }
    
    private String buildSimilarCasesContext(String machineType, String problemDescription) {
        StringBuilder context = new StringBuilder("–ü–†–ò–ú–ï–†–´ –†–ï–ú–û–ù–¢–û–í –ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–•:\n\n");
        
        try {
            List<EquipmentMaintenanceRecord> similarCases;
            
            if (machineType != null && !machineType.isEmpty()) {
                similarCases = equipmentMaintenanceRepository
                    .findByMachineWithLimit(machineType, PageRequest.of(0, 5));
            } else {
                similarCases = equipmentMaintenanceRepository
                    .findRecentRecords(PageRequest.of(0, 5));
            }
            
            if (similarCases.isEmpty()) {
                return "–í –±–∞–∑–µ –Ω–µ—Ç —Ç–æ—á–Ω–æ –ø–æ—Ö–æ–∂–∏—Ö —Å–ª—É—á–∞–µ–≤, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –¥–∞—Ç—å –æ–±—â–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–µ–º–æ–Ω—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏–π.";
            }
            
            similarCases.forEach(record -> {
                context.append(formatDetailedRecord(record)).append("\n\n");
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            context.append("–û–ë–©–ò–ï –ü–†–ò–ù–¶–ò–ü–´ –†–ï–ú–û–ù–¢–ê –û–ë–û–†–£–î–û–í–ê–ù–ò–Ø:\n");
            context.append("- –í—Å–µ–≥–¥–∞ –æ–±–µ—Å—Ç–æ—á—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ä–µ–º–æ–Ω—Ç–æ–º\n");
            context.append("- –ü—Ä–æ–≤–µ—Å—Ç–∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ—Å–º–æ—Ç—Ä\n");
            context.append("- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –°–ò–ó\n");
            context.append("- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞\n\n");
            
        } catch (Exception e) {
            context.append("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –¥–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–∏—Ö –∑–Ω–∞–Ω–∏–π –ø–æ —Ä–µ–º–æ–Ω—Ç—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.");
        }
        
        return context.toString();
    }
    
    private List<EquipmentMaintenanceRecord> getRecordsByParams(QueryAnalysisService.QueryParams params) {
        PageRequest pageRequest = PageRequest.of(0, params.getLimit());
        
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if (params.getStatus() != null && params.getMachineKeyword() != null) {
            return equipmentMaintenanceRepository
                .findByMachineAndStatusWithLimit(params.getMachineKeyword(), params.getStatus(), pageRequest);
        }
        
        if (params.getStatus() != null) {
            return equipmentMaintenanceRepository
                .findByStatusWithLimit(params.getStatus(), pageRequest);
        }
        
        if (params.getMachineKeyword() != null) {
            return equipmentMaintenanceRepository
                .findByMachineWithLimit(params.getMachineKeyword(), pageRequest);
        }
        
        if (params.getMonth() != null) {
            if (params.isOrderByDowntime()) {
                return equipmentMaintenanceRepository
                    .findByMonthOrderByDowntime(params.getMonth(), pageRequest);
            } else {
                return equipmentMaintenanceRepository
                    .findByMonth(params.getMonth(), pageRequest);
            }
        }
        
        if (params.isOrderByDowntime()) {
            return equipmentMaintenanceRepository.findTopByDowntime(pageRequest);
        }
        
        if (params.isOrderByTtr()) {
            return equipmentMaintenanceRepository.findTopByTtr(pageRequest);
        }
        
        return equipmentMaintenanceRepository.findRecentRecords(pageRequest);
    }
    
    private String formatRecord(EquipmentMaintenanceRecord record) {
        return String.format("üîß %s - %s (‚úÖ %s, ‚è±Ô∏è %s)",
            record.getMachineName() != null ? record.getMachineName() : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            record.getDescription() != null ? record.getDescription() : "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
            record.getStatus() != null ? record.getStatus() : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            record.getMachineDowntime() != null ? record.getMachineDowntime().toString() : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        );
    }
    
    private String formatDetailedRecord(EquipmentMaintenanceRecord record) {
        return String.format("""
            üîß –ú–∞—à–∏–Ω–∞: %s
            üî¥ –ü—Ä–æ–±–ª–µ–º–∞: %s
            ‚úÖ –°—Ç–∞—Ç—É—Å: %s
            ‚è±Ô∏è –í—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è: %s
            üîß TTR: %s
            üìÖ –î–∞—Ç–∞: %s
            üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: %s
            """,
            record.getMachineName() != null ? record.getMachineName() : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            record.getDescription() != null ? record.getDescription() : "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
            record.getStatus() != null ? record.getStatus() : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            record.getMachineDowntime() != null ? record.getMachineDowntime().toString() : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            record.getTtr() != null ? record.getTtr().toString() : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            record.getDate() != null ? record.getDate() : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            record.getComments() != null ? record.getComments() : "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        );
    }
}