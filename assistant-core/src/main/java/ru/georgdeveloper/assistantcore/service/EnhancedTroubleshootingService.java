package ru.georgdeveloper.assistantcore.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.PageRequest;
import ru.georgdeveloper.assistantcore.model.EquipmentMaintenanceRecord;
import ru.georgdeveloper.assistantcore.repository.EquipmentMaintenanceRepository;

import java.util.List;
import java.util.Arrays;
import java.util.stream.Collectors;

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –ª—é–±—ã–º –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—è–º
 */
@Service
public class EnhancedTroubleshootingService {
    
    @Autowired
    private EquipmentMaintenanceRepository equipmentRepo;
    
    @Autowired
    private OllamaService ollamaService;
    
    @Autowired
    private RepairInstructionsService repairInstructionsService;
    
    /**
     * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –ª—é–±—ã–º –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—è–º
     */
    public String getRepairInstruction(String problemDescription) {
        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π repair_instructions.json
        String knowledgeBaseInstruction = repairInstructionsService.generateRepairInstruction(problemDescription);
        
        if (knowledgeBaseInstruction != null && 
            !knowledgeBaseInstruction.contains("–Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")) {
            return knowledgeBaseInstruction;
        }
        
        // –ï—Å–ª–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π, –∏—â–µ–º –≤ –ë–î
        List<EquipmentMaintenanceRecord> similarCases = findSimilarCases(problemDescription);
        String context = buildInstructionContext(similarCases, problemDescription);
        return generateRepairInstruction(context, problemDescription);
    }
    
    private List<EquipmentMaintenanceRecord> findSimilarCases(String problemDescription) {
        String[] keywords = extractKeywords(problemDescription);
        
        // –ò—â–µ–º –ø–æ –∫–∞–∂–¥–æ–º—É –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
        return Arrays.stream(keywords)
            .filter(keyword -> keyword.length() > 2)
            .flatMap(keyword -> equipmentRepo.findByKeyword(keyword, PageRequest.of(0, 3)).stream())
            .distinct()
            .limit(5)
            .collect(Collectors.toList());
    }
    
    private String[] extractKeywords(String text) {
        return text.toLowerCase()
            .replaceAll("\\b(—á—Ç–æ|–∫–∞–∫|–ø–æ—á–µ–º—É|–¥–µ–ª–∞—Ç—å|—É—Å—Ç—Ä–∞–Ω–∏—Ç—å|–ø–æ—á–∏–Ω–∏—Ç—å|–Ω–µ|–Ω–∞|–≤|–∏|–∏–ª–∏|–∞|–Ω–æ)\\b", "")
            .replaceAll("[^–∞-—è—ë\\s]", " ")
            .trim()
            .split("\\s+");
    }
    
    private String buildInstructionContext(List<EquipmentMaintenanceRecord> cases, String problem) {
        StringBuilder sb = new StringBuilder();
        sb.append("–ü—Ä–æ–±–ª–µ–º–∞: ").append(problem).append("\n\n");
        
        if (!cases.isEmpty()) {
            sb.append("–ü–æ—Ö–æ–∂–∏–µ —Å–ª—É—á–∞–∏ –∏–∑ –±–∞–∑—ã —Ä–µ–º–æ–Ω—Ç–æ–≤:\n");
            cases.forEach(record -> {
                sb.append("‚Ä¢ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: ").append(record.getMachineName()).append("\n");
                sb.append("  –ü—Ä–æ–±–ª–µ–º–∞: ").append(record.getDescription()).append("\n");
                sb.append("  –†–µ—à–µ–Ω–∏–µ: ").append(extractSolution(record.getComments())).append("\n\n");
            });
        }
        
        return sb.toString();
    }
    
    private String extractSolution(String comments) {
        if (comments == null || comments.trim().isEmpty()) {
            return "—Ä–µ—à–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ";
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç—å –ø–æ—Å–ª–µ "–ß—Ç–æ —Ç—ã —Å–¥–µ–ª–∞–ª:"
        String[] parts = comments.split("–ß—Ç–æ —Ç—ã —Å–¥–µ–ª–∞–ª:");
        if (parts.length > 1) {
            return parts[1].split("Cause:")[0].trim();
        }
        
        return comments.length() > 200 ? comments.substring(0, 200) + "..." : comments;
    }
    
    private String generateRepairInstruction(String context, String problem) {
        String prompt = String.format("""
            –¢—ã - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–µ–º–æ–Ω—Ç—É –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.
            –ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º—ã.
            
            %s
            
            –°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫—É—é –ø–æ—à–∞–≥–æ–≤—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è: %s
            
            –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
            üîß –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –£–°–¢–†–ê–ù–ï–ù–ò–Æ
            
            1. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: [–∫–∞–∫ –≤—ã—è–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É]
            2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: [–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã/–º–∞—Ç–µ—Ä–∏–∞–ª—ã]
            3. –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ: [–ø–æ—à–∞–≥–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è]
            4. –ü—Ä–æ–≤–µ—Ä–∫–∞: [–∫–∞–∫ —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ]
            
            ‚ö†Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: [–≤–∞–∂–Ω—ã–µ –º–µ—Ä—ã –ø—Ä–µ–¥–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏]
            
            –ò—Å–ø–æ–ª—å–∑—É–π –æ–ø—ã—Ç –∏–∑ –ø–æ—Ö–æ–∂–∏—Ö —Å–ª—É—á–∞–µ–≤, –Ω–æ –∞–¥–∞–ø—Ç–∏—Ä—É–π –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É.
            """, context, problem);
        
        return ollamaService.generateResponse(prompt);
    }
}