package ru.georgdeveloper.assistantcore.service;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.client.ResourceAccessException;

import java.util.Map;
import java.util.HashMap;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è Ollama
 */
@Service
@Slf4j
public class OllamaHealthService {
    
    private final RestTemplate restTemplate;
    private final String ollamaUrl;
    
    @Value("${ai.ollama.fallback-models:tinyllama:latest,phi3:mini,mistral:latest}")
    private String fallbackModelsStr;
    
    public OllamaHealthService(RestTemplate restTemplate, 
                              @Value("${ai.ollama.url:http://localhost:11434}") String ollamaUrl) {
        this.restTemplate = restTemplate;
        this.ollamaUrl = ollamaUrl;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Ollama —Å–µ—Ä–≤–µ—Ä–∞
     */
    public boolean isOllamaAvailable() {
        try {
            String url = ollamaUrl + "/api/tags";
            @SuppressWarnings("unchecked")
            Map<String, Object> response = restTemplate.getForObject(url, Map.class);
            log.debug("Ollama –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {}", response != null ? "OK" : "NULL");
            return response != null;
        } catch (ResourceAccessException e) {
            log.warn("Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {}", e.getMessage());
            return false;
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Ollama: {}", e.getMessage());
            return false;
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
     */
    public boolean isModelAvailable(String modelName) {
        try {
            String url = ollamaUrl + "/api/tags";
            @SuppressWarnings("unchecked")
            Map<String, Object> response = restTemplate.getForObject(url, Map.class);
            
            if (response != null && response.containsKey("models")) {
                @SuppressWarnings("unchecked")
                java.util.List<Map<String, Object>> models = (java.util.List<Map<String, Object>>) response.get("models");
                
                return models.stream()
                        .anyMatch(model -> modelName.equals(model.get("name")));
            }
            return false;
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ–ª–∏ {}: {}", modelName, e.getMessage());
            return false;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å Ollama —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
     */
    public String getOllamaStatus() {
        if (!isOllamaAvailable()) {
            return "‚ùå Ollama —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω";
        }
        
        try {
            String url = ollamaUrl + "/api/tags";
            @SuppressWarnings("unchecked")
            Map<String, Object> response = restTemplate.getForObject(url, Map.class);
            
            if (response != null && response.containsKey("models")) {
                @SuppressWarnings("unchecked")
                java.util.List<Map<String, Object>> models = (java.util.List<Map<String, Object>>) response.get("models");
                
                StringBuilder status = new StringBuilder("‚úÖ Ollama —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω\n");
                status.append("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:\n");
                
                for (Map<String, Object> model : models) {
                    String name = (String) model.get("name");
                    String size = model.get("size") != null ? model.get("size").toString() : "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
                    status.append("  - ").append(name).append(" (—Ä–∞–∑–º–µ—Ä: ").append(size).append(")\n");
                }
                
                return status.toString();
            }
            
            return "‚úÖ Ollama —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã";
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ Ollama: {}", e.getMessage());
            return "‚ö†Ô∏è Ollama —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª—è—Ö";
        }
    }
    
    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –∏ –ø–æ–ª—É—á–∞–µ—Ç —Ä–∞–±–æ—á—É—é –º–æ–¥–µ–ª—å
     */
    public String getWorkingChatModel() {
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        String[] fallbackModels = fallbackModelsStr.split(",");
        
        for (String modelName : fallbackModels) {
            modelName = modelName.trim();
            
            if (isModelAvailable(modelName)) {
                log.info("–ü—Ä–æ–±—É–µ–º –º–æ–¥–µ–ª—å: {}", modelName);
                
                if (testModelGeneration(modelName)) {
                    log.info("–ú–æ–¥–µ–ª—å {} —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", modelName);
                    return modelName;
                } else {
                    log.warn("–ú–æ–¥–µ–ª—å {} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–∑-–∑–∞ –Ω–µ—Ö–≤–∞—Ç–∫–∏ –ø–∞–º—è—Ç–∏", modelName);
                }
            }
        }
        
        log.error("–ù–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞");
        return null;
    }
    
    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –º–æ–¥–µ–ª–∏
     */
    public boolean testModelGeneration(String modelName) {
        try {
            String testPrompt = "{\"model\":\"" + modelName + 
                              "\",\"prompt\":\"–ü—Ä–∏–≤–µ—Ç\",\"stream\":false}";
            
            log.debug("–¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å {} —Å –∑–∞–ø—Ä–æ—Å–æ–º: {}", modelName, testPrompt);
            
            RestTemplate testTemplate = new RestTemplate();
            String response = testTemplate.postForObject(
                ollamaUrl + "/api/generate", 
                testPrompt, 
                String.class
            );
            
            return response != null && !response.isEmpty();
            
        } catch (Exception e) {
            log.debug("–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ {}: {}", modelName, e.getMessage());
            return false;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø–∞–º—è—Ç–∏
     */
    public Map<String, Object> getModelRecommendation() {
        Map<String, Object> recommendation = new HashMap<>();
        
        try {
            String workingModel = getWorkingChatModel();
            
            if (workingModel != null) {
                recommendation.put("recommendedModel", workingModel);
                recommendation.put("status", "working");
                recommendation.put("message", "–ù–∞–π–¥–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞—é—â–∞—è –º–æ–¥–µ–ª—å: " + workingModel);
            } else {
                recommendation.put("recommendedModel", null);
                recommendation.put("status", "error");
                recommendation.put("message", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–º—è—Ç—å —Å–∏—Å—Ç–µ–º—ã.");
            }
            
        } catch (Exception e) {
            recommendation.put("recommendedModel", null);
            recommendation.put("status", "error");
            recommendation.put("message", "–û—à–∏–±–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏: " + e.getMessage());
        }
        
        return recommendation;
    }
}
