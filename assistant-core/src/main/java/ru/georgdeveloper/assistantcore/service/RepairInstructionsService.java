package ru.georgdeveloper.assistantcore.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Service;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.JsonNode;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import ru.georgdeveloper.assistantcore.config.ResourcePaths;

import jakarta.annotation.PostConstruct;
import java.io.InputStream;

import java.util.*;
import java.util.stream.Collectors;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ —Ä–µ–º–æ–Ω—Ç—É –∏–∑ repair_instructions.json
 */
@Service
public class RepairInstructionsService {
    
    private static final Logger logger = LoggerFactory.getLogger(RepairInstructionsService.class);
    
    @Autowired
    private OllamaService ollamaService;
    
    @Autowired
    private ResourceValidationService resourceValidationService;
    
    private final ObjectMapper objectMapper = new ObjectMapper();
    private List<RepairInstruction> repairInstructions = new ArrayList<>();
    
    @PostConstruct
    public void init() {
        loadRepairInstructions();
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–µ–º–æ–Ω—Ç—É –∏–∑ JSON —Ñ–∞–π–ª–∞
     */
    public void loadRepairInstructions() {
        try {
            if (!resourceValidationService.isResourceAvailable(ResourcePaths.REPAIR_INSTRUCTIONS_JSON)) {
                logger.error("–§–∞–π–ª {} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ classpath", ResourcePaths.REPAIR_INSTRUCTIONS_JSON);
                repairInstructions = new ArrayList<>();
                return;
            }
            
            ClassPathResource resource = new ClassPathResource(ResourcePaths.REPAIR_INSTRUCTIONS_JSON);
            
            try (InputStream inputStream = resource.getInputStream()) {
                JsonNode rootNode = objectMapper.readTree(inputStream);
                
                if (rootNode.isArray()) {
                    for (JsonNode node : rootNode) {
                        RepairInstruction instruction = parseInstruction(node);
                        if (instruction != null) {
                            repairInstructions.add(instruction);
                        }
                    }
                }
                
                logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω–æ {} –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ —Ä–µ–º–æ–Ω—Ç—É", repairInstructions.size());
            }
            
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ —Ä–µ–º–æ–Ω—Ç—É: {}", e.getMessage(), e);
            repairInstructions = new ArrayList<>();
        }
    }
    
    private RepairInstruction parseInstruction(JsonNode node) {
        try {
            String area = getNodeText(node, "–£—á–∞—Å—Ç–æ–∫");
            String equipmentGroup = getNodeText(node, "–ì—Ä—É–ø–ø–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è");
            String component = getNodeText(node, "–£–∑–µ–ª");
            String problem = getNodeText(node, "–ü—Ä–æ–±–ª–µ–º–∞");
            String solution = getNodeText(node, "–†–µ—à–µ–Ω–∏–µ");
            
            if (problem != null && solution != null) {
                return new RepairInstruction(area, equipmentGroup, component, problem, solution);
            }
        } catch (Exception e) {
            logger.warn("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {}", e.getMessage());
        }
        return null;
    }
    
    private String getNodeText(JsonNode node, String fieldName) {
        JsonNode field = node.get(fieldName);
        return field != null && !field.isNull() ? field.asText().trim() : null;
    }
    
    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –ø—Ä–æ–±–ª–µ–º—ã
     */
    public List<RepairInstruction> findRelevantInstructions(String problemDescription) {
        if (problemDescription == null || problemDescription.trim().isEmpty()) {
            return Collections.emptyList();
        }
        
        String normalizedProblem = problemDescription.toLowerCase(Locale.ROOT);
        String[] keywords = extractKeywords(normalizedProblem);
        
        return repairInstructions.stream()
            .filter(instruction -> matchesKeywords(instruction, keywords))
            .sorted((a, b) -> calculateRelevance(b, keywords) - calculateRelevance(a, keywords))
            .limit(5)
            .collect(Collectors.toList());
    }
    
    private String[] extractKeywords(String text) {
        return text.replaceAll("[^–∞-—è—ë\\s]", " ")
                  .replaceAll("\\b(—á—Ç–æ|–∫–∞–∫|–≥–¥–µ|–∫–æ–≥–¥–∞|–Ω–µ|–Ω–∞|–≤|–∏|–∏–ª–∏|–∞|–Ω–æ|–¥–ª—è|–ø–æ|—Å|–∏–∑|–∫|–æ—Ç)\\b", "")
                  .trim()
                  .split("\\s+");
    }
    
    private boolean matchesKeywords(RepairInstruction instruction, String[] keywords) {
        String searchText = (instruction.getProblem() + " " + instruction.getSolution()).toLowerCase(Locale.ROOT);
        
        return Arrays.stream(keywords)
            .filter(keyword -> keyword.length() > 2)
            .anyMatch(searchText::contains);
    }
    
    private int calculateRelevance(RepairInstruction instruction, String[] keywords) {
        String searchText = (instruction.getProblem() + " " + instruction.getSolution()).toLowerCase(Locale.ROOT);
        
        return (int) Arrays.stream(keywords)
            .filter(keyword -> keyword.length() > 2)
            .mapToLong(keyword -> searchText.split(keyword, -1).length - 1)
            .sum();
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —Ä–µ–º–æ–Ω—Ç—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI –∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
     */
    public String generateRepairInstruction(String problemDescription) {
        List<RepairInstruction> relevantInstructions = findRelevantInstructions(problemDescription);
        
        if (relevantInstructions.isEmpty()) {
            return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã. " +
                   "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.";
        }
        
        StringBuilder context = new StringBuilder();
        context.append("–ü–æ—Ö–æ–∂–∏–µ —Å–ª—É—á–∞–∏ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:\n\n");
        
        for (RepairInstruction instruction : relevantInstructions) {
            context.append("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: ").append(instruction.getEquipmentGroup())
                   .append(" (").append(instruction.getComponent()).append(")\n");
            context.append("–ü—Ä–æ–±–ª–µ–º–∞: ").append(instruction.getProblem()).append("\n");
            context.append("–†–µ—à–µ–Ω–∏–µ: ").append(instruction.getSolution()).append("\n\n");
        }
        
        String prompt = String.format("""
            –¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–µ–º–æ–Ω—Ç—É –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.
            –ù–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ö–æ–∂–∏—Ö —Å–ª—É—á–∞–µ–≤ —Å–æ–∑–¥–∞–π –ø–æ—à–∞–≥–æ–≤—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.
            
            %s
            
            –ü—Ä–æ–±–ª–µ–º–∞ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è: %s
            
            –°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é:
            üîß –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –£–°–¢–†–ê–ù–ï–ù–ò–Æ
            
            1. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:
            2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞:
            3. –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ:
            4. –ü—Ä–æ–≤–µ—Ä–∫–∞:
            
            ‚ö†Ô∏è –ú–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:
            
            –ò—Å–ø–æ–ª—å–∑—É–π –æ–ø—ã—Ç –∏–∑ –ø–æ—Ö–æ–∂–∏—Ö —Å–ª—É—á–∞–µ–≤, –Ω–æ –∞–¥–∞–ø—Ç–∏—Ä—É–π –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É.
            """, context.toString(), problemDescription);
        
        return ollamaService.generateResponse(prompt);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
     */
    public List<RepairInstruction> getInstructionsForEquipment(String equipmentName) {
        if (equipmentName == null) return Collections.emptyList();
        
        String normalizedName = equipmentName.toLowerCase(Locale.ROOT);
        
        return repairInstructions.stream()
            .filter(instruction -> 
                instruction.getEquipmentGroup() != null && 
                instruction.getEquipmentGroup().toLowerCase(Locale.ROOT).contains(normalizedName))
            .collect(Collectors.toList());
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–±–ª–µ–º
     */
    public Map<String, Long> getProblemStatistics() {
        return repairInstructions.stream()
            .map(RepairInstruction::getProblem)
            .filter(Objects::nonNull)
            .collect(Collectors.groupingBy(
                problem -> extractProblemType(problem),
                Collectors.counting()
            ));
    }
    
    private String extractProblemType(String problem) {
        String lowerProblem = problem.toLowerCase(Locale.ROOT);
        
        if (lowerProblem.contains("—É—Ç–µ—á–∫–∞")) return "–£—Ç–µ—á–∫–∏";
        if (lowerProblem.contains("–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç") || lowerProblem.contains("–Ω–µ–∏—Å–ø—Ä–∞–≤")) return "–ù–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏";
        if (lowerProblem.contains("–∑–∞–º–µ–Ω–∞") || lowerProblem.contains("–∏–∑–Ω–æ—Å")) return "–ó–∞–º–µ–Ω–∞ –¥–µ—Ç–∞–ª–µ–π";
        if (lowerProblem.contains("–∫–∞–ª–∏–±—Ä–æ–≤–∫–∞") || lowerProblem.contains("–Ω–∞—Å—Ç—Ä–æ–π–∫–∞")) return "–ù–∞—Å—Ç—Ä–æ–π–∫–∞";
        if (lowerProblem.contains("–¥–∞—Ç—á–∏–∫")) return "–î–∞—Ç—á–∏–∫–∏";
        if (lowerProblem.contains("–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")) return "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å";
        
        return "–ü—Ä–æ—á–∏–µ";
    }
    
    public List<RepairInstruction> getAllInstructions() {
        return new ArrayList<>(repairInstructions);
    }
    
    /**
     * –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–µ–º–æ–Ω—Ç—É
     */
    public static class RepairInstruction {
        private final String area;
        private final String equipmentGroup;
        private final String component;
        private final String problem;
        private final String solution;
        
        public RepairInstruction(String area, String equipmentGroup, String component, 
                               String problem, String solution) {
            this.area = area;
            this.equipmentGroup = equipmentGroup;
            this.component = component;
            this.problem = problem;
            this.solution = solution;
        }
        
        public String getArea() { return area; }
        public String getEquipmentGroup() { return equipmentGroup; }
        public String getComponent() { return component; }
        public String getProblem() { return problem; }
        public String getSolution() { return solution; }
        
        @Override
        public String toString() {
            return String.format("RepairInstruction{equipment='%s', component='%s', problem='%s'}", 
                               equipmentGroup, component, problem);
        }
    }
}