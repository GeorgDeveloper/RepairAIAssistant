package ru.georgdeveloper.assistantcore.service;

import dev.langchain4j.data.segment.TextSegment;
import dev.langchain4j.model.chat.ChatLanguageModel;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * –ù–æ–≤—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ LangChain4j
 * –ó–∞–º–µ–Ω—è–µ—Ç —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É —Å—Ç–∞—Ä–æ–≥–æ RepairAssistantService
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class LangChainAssistantService {

    private final ChatLanguageModel chatModel;
    private final VectorStoreService vectorStoreService;

    // –®–∞–±–ª–æ–Ω—ã –ø—Ä–æ–º–ø—Ç–æ–≤
    // (removed legacy template in favor of SmartPromptBuilder)

    // (removed legacy template in favor of SmartPromptBuilder)

    // (removed legacy template in favor of SmartPromptBuilder)

    /**
     * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    public String processQuery(String userQuery) {
        try {
            log.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {}", userQuery);

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
            QueryType queryType = classifyQuery(userQuery);
            log.debug("–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞: {}", queryType);

            // –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: –æ–±—â–∏–π/—Ä–µ–º–æ–Ω—Ç–Ω—ã–π/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤—ã—à–µ (—ç–≤—Ä–∏—Å—Ç–∏–∫–∏)
            // –°–º–∞—Ä—Ç-–ø–æ–∏—Å–∫: –≥–∏–±—Ä–∏–¥ + –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–ø–æ–∫–∞ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤)
            List<TextSegment> relevantSegments = vectorStoreService.searchSmart(userQuery, 10);
            String context = buildContext(relevantSegments);

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
            String response = switch (queryType) {
                case REPAIR_INSTRUCTION -> generateRepairInstruction(userQuery, context);
                case STATISTICS -> generateStatisticsAnalysis(userQuery, context);
                case GENERAL -> generateGeneralResponse(userQuery, context);
            };

            log.info("–û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –¥–ª–∏–Ω–∞: {} —Å–∏–º–≤–æ–ª–æ–≤", response.length());
            return response;

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {}", userQuery, e);
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.";
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ç–∏–ø—É –¥–∞–Ω–Ω—ã—Ö
     */
    public String processQueryWithFilter(String userQuery, String dataType) {
        try {
            List<TextSegment> relevantSegments = vectorStoreService.searchSmart(userQuery, 10, Map.of("type", dataType));
            String context = buildContext(relevantSegments);

            QueryType queryType = classifyQuery(userQuery);
            return switch (queryType) {
                case REPAIR_INSTRUCTION -> generateRepairInstruction(userQuery, context);
                case STATISTICS -> generateStatisticsAnalysis(userQuery, context);
                case GENERAL -> generateGeneralResponse(userQuery, context);
            };

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º: {}", userQuery, e);
            return "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.";
        }
    }

    /**
     * –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
     */
    private QueryType classifyQuery(String query) {
        String lowerQuery = query.toLowerCase();

        // –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–µ–º–æ–Ω—Ç—É
        if (lowerQuery.contains("–∫–∞–∫ –ø–æ—á–∏–Ω–∏—Ç—å") || 
            lowerQuery.contains("–∫–∞–∫ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å") ||
            lowerQuery.contains("–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è") ||
            lowerQuery.contains("—á—Ç–æ –¥–µ–ª–∞—Ç—å") ||
            lowerQuery.contains("—É—Ç–µ—á–∫–∞") ||
            lowerQuery.contains("–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç") ||
            lowerQuery.contains("–ø–æ–ª–æ–º–∫–∞")) {
            return QueryType.REPAIR_INSTRUCTION;
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã
        if (lowerQuery.contains("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞") ||
            lowerQuery.contains("—Å–∫–æ–ª—å–∫–æ") ||
            lowerQuery.contains("—Ç–æ–ø") ||
            lowerQuery.contains("—Å–∞–º—ã–µ") ||
            lowerQuery.contains("—á–∞—Å—Ç—ã–µ") ||
            lowerQuery.contains("–∞–Ω–∞–ª–∏–∑") ||
            lowerQuery.contains("—Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏")) {
            return QueryType.STATISTICS;
        }

        // –û–±—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
        return QueryType.GENERAL;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–µ–º–æ–Ω—Ç—É
     */
    private String generateRepairInstruction(String query, String context) {
        try {
            String promptText = SmartPromptBuilder.buildRepair(
                    context.isEmpty() ? "" : context,
                    query
            );
            return chatModel.generate(promptText);
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–µ–º–æ–Ω—Ç—É: {}", e.getMessage());
            return generateFallbackRepairResponse(query, context);
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
     */
    private String generateStatisticsAnalysis(String query, String context) {
        try {
            String promptText = SmartPromptBuilder.buildStatistics(
                    context.isEmpty() ? "" : context,
                    query
            );
            return chatModel.generate(promptText);
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {}", e.getMessage());
            return generateFallbackStatisticsResponse(query, context);
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
     */
    private String generateGeneralResponse(String query, String context) {
        try {
            String lowerQuery = query == null ? "" : query.toLowerCase();
            if (lowerQuery.contains("–∫—Ç–æ —Ç—ã") || lowerQuery.contains("—á—Ç–æ —Ç—ã") || lowerQuery.contains("who are you") || lowerQuery.matches(".*\\b(–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π|hello|hi)\\b.*")) {
                return "–ü—Ä–∏–≤–µ—Ç! –Ø Kvant AI ‚Äî –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–µ–º–æ–Ω—Ç—É –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.\n\n" +
                        "–ü–æ–º–æ–≥–∞—é —Å: \n" +
                        "‚Ä¢ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π\n" +
                        "‚Ä¢ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ —Ä–µ–º–æ–Ω—Ç—É\n" +
                        "‚Ä¢ –∞–Ω–∞–ª–∏–∑–æ–º –¥–∞–Ω–Ω—ã—Ö –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è\n" +
                        "‚Ä¢ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏";
            }

            boolean isRepairIntent = lowerQuery.contains("—É—Ç–µ—á–∫–∞") || lowerQuery.contains("—Ä–µ–º–æ–Ω—Ç") || lowerQuery.contains("–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç") || lowerQuery.contains("–ø–æ–ª–æ–º–∫–∞") || lowerQuery.contains("–∫–∞–∫ –ø–æ—á–∏–Ω–∏—Ç—å") || lowerQuery.contains("–∫–∞–∫ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å") || lowerQuery.contains("–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è") || lowerQuery.contains("—á—Ç–æ –¥–µ–ª–∞—Ç—å");
            String promptText = SmartPromptBuilder.buildGeneral(
                    context,
                    query,
                    isRepairIntent
            );
            return chatModel.generate(promptText);
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞: {}", e.getMessage());
            return generateFallbackGeneralResponse(query, context);
        }
    }

    /**
     * –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
     */
    private String buildContext(List<TextSegment> segments) {
        if (segments.isEmpty()) {
            return "";
        }

        return segments.stream()
                .map(segment -> {
                    String type = segment.metadata().getString("type");
                    String content = segment.text();
                    return String.format("[%s] %s", type.toUpperCase(), content);
                })
                .collect(Collectors.joining("\n\n---\n\n"));
    }

    /**
     * Fallback –æ—Ç–≤–µ—Ç –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ —Ä–µ–º–æ–Ω—Ç—É
     */
    private String generateFallbackRepairResponse(String query, String context) {
        StringBuilder response = new StringBuilder();
        response.append("üîß **–ü–æ–º–æ—â—å —Å —Ä–µ–º–æ–Ω—Ç–æ–º**\n\n");
        
        if (!context.isEmpty()) {
            response.append("–ù–∞–π–¥–µ–Ω–∞ –ø–æ—Ö–æ–∂–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:\n\n");
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2-3 –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
            String[] contextParts = context.split("---");
            int maxParts = Math.min(2, contextParts.length);
            for (int i = 0; i < maxParts; i++) {
                response.append(contextParts[i].trim()).append("\n\n");
            }
        }
        
        response.append("**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–º–æ–Ω—Ç—É:**\n");
        response.append("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã\n");
        response.append("2. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n");
        response.append("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n");
        response.append("4. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É\n\n");
        
        response.append("‚ö†Ô∏è *–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —ç–∫—Å–ø–µ—Ä—Ç—É –ø–æ —Ä–µ–º–æ–Ω—Ç—É.*");
        
        return response.toString();
    }
    
    /**
     * Fallback –æ—Ç–≤–µ—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
     */
    private String generateFallbackStatisticsResponse(String query, String context) {
        StringBuilder response = new StringBuilder();
        response.append("üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑**\n\n");
        
        if (!context.isEmpty()) {
            response.append("**–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**\n");
            response.append(context).append("\n\n");
        }
        
        response.append("**–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–Ω–∞–ª–∏–∑—É:**\n");
        response.append("1. –ò–∑—É—á–∏—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n");
        response.append("2. –í—ã–¥–µ–ª–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏\n");
        response.append("3. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç—Ä–µ–Ω–¥—ã –∏ –∞–Ω–æ–º–∞–ª–∏–∏\n");
        response.append("4. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤—ã–≤–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö\n\n");
        
        response.append("‚ö†Ô∏è *AI-–º–æ–¥–µ–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö.*");
        
        return response.toString();
    }
    
    /**
     * Fallback –æ—Ç–≤–µ—Ç –¥–ª—è –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
     */
    private String generateFallbackGeneralResponse(String query, String context) {
        StringBuilder response = new StringBuilder();
        
        // –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π
        if (query.toLowerCase().contains("–∫—Ç–æ —Ç—ã") || query.toLowerCase().contains("—á—Ç–æ —Ç—ã")) {
            response.append("–ü—Ä–∏–≤–µ—Ç! –Ø Kvant AI - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–µ–º–æ–Ω—Ç—É –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.\n\n");
            response.append("–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å:\n");
            response.append("‚Ä¢ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π\n");
            response.append("‚Ä¢ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ —Ä–µ–º–æ–Ω—Ç—É\n");
            response.append("‚Ä¢ –ê–Ω–∞–ª–∏–∑–æ–º –¥–∞–Ω–Ω—ã—Ö –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è\n");
            response.append("‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏\n\n");
            response.append("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å —É –º–µ–Ω—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. ");
            response.append("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.");
            return response.toString();
        }
        
        // –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Ä–µ–º–æ–Ω—Ç–µ
        if (query.toLowerCase().contains("—É—Ç–µ—á–∫–∞") || query.toLowerCase().contains("—Ä–µ–º–æ–Ω—Ç") || 
            query.toLowerCase().contains("–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç") || query.toLowerCase().contains("–ø–æ–ª–æ–º–∫–∞")) {
            response.append("üîß **–ü–æ–º–æ—â—å —Å —Ä–µ–º–æ–Ω—Ç–æ–º**\n\n");
            
            if (!context.isEmpty()) {
                response.append("–ù–∞–π–¥–µ–Ω–∞ –ø–æ—Ö–æ–∂–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:\n\n");
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2-3 –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
                String[] contextParts = context.split("---");
                int maxParts = Math.min(3, contextParts.length);
                for (int i = 0; i < maxParts; i++) {
                    response.append(contextParts[i].trim()).append("\n\n");
                }
            }
            
            response.append("**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n");
            response.append("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã\n");
            response.append("2. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n");
            response.append("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n");
            response.append("4. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É\n\n");
            
            response.append("‚ö†Ô∏è *–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —ç–∫—Å–ø–µ—Ä—Ç—É –ø–æ —Ä–µ–º–æ–Ω—Ç—É.*");
            return response.toString();
        }
        
        // –û–±—â–∏–π –æ—Ç–≤–µ—Ç
        response.append("ü§ñ **Kvant AI**\n\n");
        response.append("–Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–µ–º–æ–Ω—Ç—É –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.\n\n");
        
        if (!context.isEmpty()) {
            response.append("–ù–∞–π–¥–µ–Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n");
            response.append(context.substring(0, Math.min(500, context.length())));
            if (context.length() > 500) {
                response.append("...");
            }
            response.append("\n\n");
        }
        
        response.append("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å —É –º–µ–Ω—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. ");
        response.append("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.");
        
        return response.toString();
    }

    /**
     * –¢–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
     */
    private enum QueryType {
        REPAIR_INSTRUCTION,  // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–µ–º–æ–Ω—Ç—É
        STATISTICS,          // –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã
        GENERAL             // –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    }
}
