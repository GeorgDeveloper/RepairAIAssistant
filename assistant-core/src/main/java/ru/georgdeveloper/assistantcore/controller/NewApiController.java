package ru.georgdeveloper.assistantcore.controller;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import ru.georgdeveloper.assistantcore.service.DataMigrationService;
import ru.georgdeveloper.assistantcore.service.FallbackAssistantService;
import ru.georgdeveloper.assistantcore.service.LangChainAssistantService;
import ru.georgdeveloper.assistantcore.service.VectorStoreService;

import java.util.Map;

/**
 * –ù–æ–≤—ã–π API –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ LangChain
 * –ó–∞–º–µ–Ω—è–µ—Ç —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É —Å—Ç–∞—Ä–æ–≥–æ ApiController
 */
@RestController
@RequestMapping("/api/v2")
@RequiredArgsConstructor
@Slf4j
public class NewApiController {

    private final DataMigrationService migrationService;
    
    @Autowired(required = false)
    private LangChainAssistantService assistantService;
    
    @Autowired(required = false) 
    private VectorStoreService vectorStoreService;
    
    @Autowired(required = false)
    private FallbackAssistantService fallbackService;
    
    @Value("${ai.enabled:true}")
    private boolean aiEnabled;

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∏ LangChain –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
     */
    @PostMapping(value = "/query", produces = "application/json;charset=UTF-8")
    public ResponseEntity<Map<String, Object>> processQuery(@RequestBody Map<String, String> request) {
        try {
            String userQuery = request.get("query");
            if (userQuery == null || userQuery.trim().isEmpty()) {
                return ResponseEntity.badRequest()
                        .body(Map.of("error", "–ó–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"));
            }

            log.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {}", userQuery);

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å
            String response;
            if (!aiEnabled || assistantService == null) {
                if (fallbackService != null) {
                    response = fallbackService.processQuery(userQuery);
                } else {
                    response = "üö´ AI —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.";
                }
            } else {
                response = assistantService.processQuery(userQuery);
            }

            log.info("–û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –¥–ª–∏–Ω–∞: {} —Å–∏–º–≤–æ–ª–æ–≤", response.length());

            return ResponseEntity.ok(Map.of(
                    "response", response,
                    "query", userQuery,
                    "timestamp", System.currentTimeMillis(),
                    "version", "v2-langchain"
            ));

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", e);
            return ResponseEntity.internalServerError()
                    .body(Map.of("error", "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + e.getMessage()));
        }
    }

    /**
     * –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ç–∏–ø—É –¥–∞–Ω–Ω—ã—Ö
     */
    @PostMapping(value = "/query/filtered", produces = "application/json;charset=UTF-8")
    public ResponseEntity<Map<String, Object>> processFilteredQuery(
            @RequestBody Map<String, String> request,
            @RequestParam(defaultValue = "all") String dataType) {
        
        try {
            String userQuery = request.get("query");
            if (userQuery == null || userQuery.trim().isEmpty()) {
                return ResponseEntity.badRequest()
                        .body(Map.of("error", "–ó–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"));
            }

            log.info("–ü–æ–ª—É—á–µ–Ω —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {}, —Ç–∏–ø: {}", userQuery, dataType);

            String response;
            if (!aiEnabled || assistantService == null) {
                if (fallbackService != null) {
                    response = fallbackService.processQuery(userQuery);
                } else {
                    response = "üö´ AI —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.";
                }
            } else {
                if ("all".equals(dataType)) {
                    response = assistantService.processQuery(userQuery);
                } else {
                    response = assistantService.processQueryWithFilter(userQuery, dataType);
                }
            }

            return ResponseEntity.ok(Map.of(
                    "response", response,
                    "query", userQuery,
                    "dataType", dataType,
                    "timestamp", System.currentTimeMillis(),
                    "version", "v2-langchain"
            ));

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞", e);
            return ResponseEntity.internalServerError()
                    .body(Map.of("error", "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + e.getMessage()));
        }
    }

    /**
     * –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î
     */
    @PostMapping(value = "/feedback", produces = "application/json;charset=UTF-8")
    public ResponseEntity<Map<String, Object>> saveFeedback(@RequestBody Map<String, String> request) {
        try {
            String userQuery = request.get("request");
            String assistantResponse = request.get("response");
            
            if (userQuery == null || userQuery.trim().isEmpty()) {
                return ResponseEntity.badRequest()
                        .body(Map.of("error", "–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"));
            }
            
            if (assistantResponse == null || assistantResponse.trim().isEmpty()) {
                return ResponseEntity.badRequest()
                        .body(Map.of("error", "–û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"));
            }

            log.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: –∑–∞–ø—Ä–æ—Å –¥–ª–∏–Ω–æ–π {} —Å–∏–º–≤–æ–ª–æ–≤", userQuery.length());

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ AI –≤–∫–ª—é—á–µ–Ω)
            if (aiEnabled && vectorStoreService != null) {
                vectorStoreService.addUserFeedback(userQuery, assistantResponse);
            } else {
                log.info("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ AI –æ—Ç–∫–ª—é—á–µ–Ω - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ");
            }

            return ResponseEntity.ok(Map.of(
                    "status", "success",
                    "message", "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",
                    "timestamp", System.currentTimeMillis(),
                    "version", "v2-langchain"
            ));

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏", e);
            return ResponseEntity.internalServerError()
                    .body(Map.of("error", "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: " + e.getMessage()));
        }
    }

    /**
     * –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
     */
    @GetMapping("/health")
    public ResponseEntity<Map<String, Object>> healthCheck() {
        try {
            return ResponseEntity.ok(Map.of(
                    "status", "healthy",
                    "version", "v2-langchain",
                    "timestamp", System.currentTimeMillis(),
                    "components", Map.of(
                            "ai", aiEnabled ? "enabled" : "disabled",
                            "langchain", (aiEnabled && assistantService != null) ? "active" : "inactive",
                            "vectorStore", (aiEnabled && vectorStoreService != null) ? "active" : "inactive",
                            "fallback", (!aiEnabled && fallbackService != null) ? "active" : "inactive"
                    )
            ));
        } catch (Exception e) {
            return ResponseEntity.internalServerError()
                    .body(Map.of(
                            "status", "unhealthy",
                            "error", e.getMessage()
                    ));
        }
    }

    /**
     * –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
     */
    @PostMapping("/admin/migrate")
    public ResponseEntity<Map<String, Object>> migrateData() {
        try {
            log.info("–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–ø—Ä–æ—Å—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            new Thread(() -> {
                try {
                    migrationService.migrateAllData();
                } catch (Exception e) {
                    log.error("–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö", e);
                }
            }).start();

            return ResponseEntity.ok(Map.of(
                    "message", "–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω–∞",
                    "status", "started",
                    "timestamp", System.currentTimeMillis()
            ));

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏", e);
            return ResponseEntity.internalServerError()
                    .body(Map.of("error", "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: " + e.getMessage()));
        }
    }

    /**
     * –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    @PostMapping("/admin/migrate/incremental")
    public ResponseEntity<Map<String, Object>> migrateNewData() {
        try {
            log.info("–ó–∞–ø—É—Å–∫ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏");
            
            new Thread(() -> {
                try {
                    migrationService.migrateNewRecords();
                } catch (Exception e) {
                    log.error("–û—à–∏–±–∫–∞ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏", e);
                }
            }).start();

            return ResponseEntity.ok(Map.of(
                    "message", "–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞",
                    "status", "started",
                    "timestamp", System.currentTimeMillis()
            ));

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏", e);
            return ResponseEntity.internalServerError()
                    .body(Map.of("error", "–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: " + e.getMessage()));
        }
    }

    /**
     * –ü–æ–ª–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –æ—á–∏—Å—Ç–∫–æ–π –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
     */
    @PostMapping("/admin/migrate/clear")
    public ResponseEntity<Map<String, Object>> migrateDataWithClear() {
        try {
            log.info("–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å –æ—á–∏—Å—Ç–∫–æ–π —á–µ—Ä–µ–∑ API");
            
            new Thread(() -> {
                try {
                    migrationService.migrateAllDataWithClear();
                } catch (Exception e) {
                    log.error("–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å –æ—á–∏—Å—Ç–∫–æ–π", e);
                }
            }).start();
            
            return ResponseEntity.ok(Map.of(
                "status", "started",
                "message", "–ü–æ–ª–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –æ—á–∏—Å—Ç–∫–æ–π –∑–∞–ø—É—â–µ–Ω–∞",
                "timestamp", System.currentTimeMillis()
            ));
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å –æ—á–∏—Å—Ç–∫–æ–π", e);
            return ResponseEntity.internalServerError().body(Map.of(
                "status", "error",
                "message", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å –æ—á–∏—Å—Ç–∫–æ–π: " + e.getMessage(),
                "timestamp", System.currentTimeMillis()
            ));
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
     */
    @PostMapping("/admin/clear")
    public ResponseEntity<Map<String, Object>> clearVectorStore() {
        try {
            log.info("–ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —á–µ—Ä–µ–∑ API");
            vectorStoreService.clearStore();
            
            return ResponseEntity.ok(Map.of(
                "status", "success",
                "message", "–í–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ—á–∏—â–µ–Ω–æ",
                "timestamp", System.currentTimeMillis()
            ));
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞", e);
            return ResponseEntity.internalServerError().body(Map.of(
                "status", "error",
                "message", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: " + e.getMessage(),
                "timestamp", System.currentTimeMillis()
            ));
        }
    }

    /**
     * –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ
     */
    @GetMapping("/info")
    public ResponseEntity<Map<String, Object>> getSystemInfo() {
        return ResponseEntity.ok(Map.of(
                "name", "Repair AI Assistant v2",
                "version", "2.0.0-langchain",
                "description", "AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ LangChain4j –∏ ChromaDB",
                "features", Map.of(
                        "semanticSearch", true,
                        "vectorDatabase", true,
                        "langchain", true,
                        "embeddings", "nomic-embed-text",
                        "llm", "deepseek-r1:latest"
                ),
                "endpoints", Map.of(
                        "query", "/api/v2/query",
                        "filteredQuery", "/api/v2/query/filtered",
                        "feedback", "/api/v2/feedback",
                        "health", "/api/v2/health",
                        "migrate", "/api/v2/admin/migrate",
                        "migrateIncremental", "/api/v2/admin/migrate/incremental",
                        "migrateClear", "/api/v2/admin/migrate/clear",
                        "clearVectorStore", "/api/v2/admin/clear"
                )
        ));
    }
}
