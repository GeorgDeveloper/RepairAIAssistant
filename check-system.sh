#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è Repair AI Assistant v2.0

echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Repair AI Assistant v2.0..."
echo "=================================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ HTTP —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
check_http() {
    local url=$1
    local name=$2
    local expected=$3
    
    echo -n "–ü—Ä–æ–≤–µ—Ä–∫–∞ $name... "
    
    if response=$(curl -s --max-time 10 "$url" 2>/dev/null); then
        if [[ -z "$expected" ]] || echo "$response" | grep -q "$expected"; then
            echo -e "${GREEN}‚úì OK${NC}"
            return 0
        else
            echo -e "${RED}‚úó –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç${NC}"
            echo "  –û—Ç–≤–µ—Ç: $response"
            return 1
        fi
    else
        echo -e "${RED}‚úó –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
check_docker_container() {
    local container_name=$1
    local service_name=$2
    
    echo -n "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ $service_name... "
    
    if docker ps --format "table {{.Names}}" | grep -q "$container_name"; then
        status=$(docker ps --format "table {{.Names}}\t{{.Status}}" | grep "$container_name" | awk '{print $2}')
        if [[ "$status" == "Up" ]]; then
            echo -e "${GREEN}‚úì –ó–∞–ø—É—â–µ–Ω${NC}"
            return 0
        else
            echo -e "${YELLOW}‚ö† –°—Ç–∞—Ç—É—Å: $status${NC}"
            return 1
        fi
    else
        echo -e "${RED}‚úó –ù–µ –Ω–∞–π–¥–µ–Ω${NC}"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞
check_port() {
    local port=$1
    local service_name=$2
    
    echo -n "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ $port ($service_name)... "
    
    if netstat -an 2>/dev/null | grep -q ":$port.*LISTEN" || ss -tulpn 2>/dev/null | grep -q ":$port"; then
        echo -e "${GREEN}‚úì –û—Ç–∫—Ä—ã—Ç${NC}"
        return 0
    else
        echo -e "${RED}‚úó –ó–∞–∫—Ä—ã—Ç${NC}"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
echo -e "\n${BLUE}1. –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è${NC}"
echo "------------------------"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
echo -n "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω... "
if command -v docker &> /dev/null; then
    docker_version=$(docker --version | cut -d' ' -f3 | cut -d',' -f1)
    echo -e "${GREEN}‚úì –í–µ—Ä—Å–∏—è: $docker_version${NC}"
else
    echo -e "${RED}‚úó –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
echo -n "Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω... "
if command -v docker-compose &> /dev/null; then
    compose_version=$(docker-compose --version | cut -d' ' -f3 | cut -d',' -f1)
    echo -e "${GREEN}‚úì –í–µ—Ä—Å–∏—è: $compose_version${NC}"
else
    echo -e "${RED}‚úó –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Java
echo -n "Java —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞... "
if command -v java &> /dev/null; then
    java_version=$(java -version 2>&1 | head -n 1 | cut -d'"' -f2)
    echo -e "${GREEN}‚úì –í–µ—Ä—Å–∏—è: $java_version${NC}"
else
    echo -e "${RED}‚úó –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞${NC}"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Maven
echo -n "Maven —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω... "
if command -v mvn &> /dev/null; then
    mvn_version=$(mvn -version 2>/dev/null | head -n 1 | cut -d' ' -f3)
    echo -e "${GREEN}‚úì –í–µ—Ä—Å–∏—è: $mvn_version${NC}"
else
    echo -e "${RED}‚úó –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞
echo -n "–°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ... "
free_space=$(df -h . | awk 'NR==2 {print $4}')
echo -e "${GREEN}‚úì –î–æ—Å—Ç—É–ø–Ω–æ: $free_space${NC}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
echo -n "–î–æ—Å—Ç—É–ø–Ω–∞—è –ø–∞–º—è—Ç—å... "
if command -v free &> /dev/null; then
    available_ram=$(free -h | awk 'NR==2{print $7}')
    echo -e "${GREEN}‚úì –î–æ—Å—Ç—É–ø–Ω–æ: $available_ram${NC}"
else
    echo -e "${YELLOW}‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å${NC}"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo -e "\n${BLUE}2. Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã${NC}"
echo "---------------------"

check_docker_container "chromadb" "ChromaDB"
check_docker_container "ollama" "Ollama"
check_docker_container "mysql" "MySQL"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
echo -e "\n${BLUE}3. –°–µ—Ç–µ–≤—ã–µ –ø–æ—Ä—Ç—ã${NC}"
echo "-----------------"

check_port 8000 "ChromaDB"
check_port 11434 "Ollama"
check_port 3306 "MySQL"
check_port 8080 "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
echo -e "\n${BLUE}4. HTTP —Å–µ—Ä–≤–∏—Å—ã${NC}"
echo "----------------"

check_http "http://localhost:8000/api/v1/heartbeat" "ChromaDB API" "heartbeat"
check_http "http://localhost:11434/api/tags" "Ollama API" "models"
check_http "http://localhost:8080/api/v2/health" "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ API" "healthy"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π Ollama
echo -e "\n${BLUE}5. –ú–æ–¥–µ–ª–∏ Ollama${NC}"
echo "-----------------"

echo -n "–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π... "
if models_response=$(curl -s http://localhost:11434/api/tags 2>/dev/null); then
    if echo "$models_response" | grep -q "deepseek-r1"; then
        echo -e "${GREEN}‚úì deepseek-r1 –Ω–∞–π–¥–µ–Ω–∞${NC}"
    else
        echo -e "${RED}‚úó deepseek-r1 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞${NC}"
    fi
    
    if echo "$models_response" | grep -q "nomic-embed-text"; then
        echo -e "  ${GREEN}‚úì nomic-embed-text –Ω–∞–π–¥–µ–Ω–∞${NC}"
    else
        echo -e "  ${RED}‚úó nomic-embed-text –Ω–µ –Ω–∞–π–¥–µ–Ω–∞${NC}"
    fi
else
    echo -e "${RED}‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π${NC}"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π ChromaDB
echo -e "\n${BLUE}6. ChromaDB –∫–æ–ª–ª–µ–∫—Ü–∏–∏${NC}"
echo "----------------------"

echo -n "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ repair_knowledge... "
if collections_response=$(curl -s http://localhost:8000/api/v1/collections 2>/dev/null); then
    if echo "$collections_response" | grep -q "repair_knowledge"; then
        echo -e "${GREEN}‚úì –ù–∞–π–¥–µ–Ω–∞${NC}"
    else
        echo -e "${YELLOW}‚ö† –ù–µ –Ω–∞–π–¥–µ–Ω–∞ (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)${NC}"
    fi
else
    echo -e "${RED}‚úó –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π${NC}"
fi

# –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
echo -e "\n${BLUE}7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏${NC}"
echo "--------------------------------"

echo -n "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ AI... "
test_query='{"query": "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?"}'
if test_response=$(curl -s -X POST http://localhost:8080/api/v2/query \
    -H "Content-Type: application/json" \
    -d "$test_query" 2>/dev/null); then
    
    if echo "$test_response" | grep -q "response"; then
        echo -e "${GREEN}‚úì –†–∞–±–æ—Ç–∞–µ—Ç${NC}"
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç
        response_text=$(echo "$test_response" | grep -o '"response":"[^"]*"' | cut -d'"' -f4 | cut -c1-50)
        echo "  –û—Ç–≤–µ—Ç: $response_text..."
    else
        echo -e "${RED}‚úó –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç${NC}"
        echo "  –û—Ç–≤–µ—Ç: $test_response"
    fi
else
    echo -e "${RED}‚úó –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞${NC}"
fi

# –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
echo -e "\n${BLUE}üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞${NC}"
echo "=================="

# –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
total_checks=15
passed_checks=0

# –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–¥—Å—á–µ—Ç–∞, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞–∂–µ–º —Å—Ç–∞—Ç—É—Å
echo "–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞. –î–µ—Ç–∞–ª–∏ —Å–º. –≤—ã—à–µ."

echo -e "\n${BLUE}üí° –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã${NC}"
echo "==================="
echo "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:    docker-compose restart"
echo "–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ ChromaDB:     docker logs chromadb -f"
echo "–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ Ollama:       docker logs ollama -f"
echo "–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:   tail -f assistant-core/logs/repair-assistant.log"
echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è:           curl http://localhost:8080/api/v2/health"

echo -e "\n${GREEN}‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${NC}"
